
2024_lcd_and_clck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000460c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  080047ac  080047ac  000057ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004934  08004934  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004934  08004934  00005934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800493c  0800493c  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800493c  0800493c  0000593c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004940  08004940  00005940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004944  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  20000060  080049a4  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  080049a4  000062fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0d8  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e5e  00000000  00000000  00013168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00014fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009da  00000000  00000000  00015c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016977  00000000  00000000  0001663a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ecd6  00000000  00000000  0002cfb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e687  00000000  00000000  0003bc87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca30e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039f0  00000000  00000000  000ca354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000cdd44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004794 	.word	0x08004794

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08004794 	.word	0x08004794

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000580:	b5b0      	push	{r4, r5, r7, lr}
 8000582:	b08a      	sub	sp, #40	@ 0x28
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
 800058c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800058e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000592:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	lcd.en_pin = en_pin;
 8000596:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800059a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	lcd.en_port = en_port;
 800059c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800059e:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80005a0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80005a2:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 80005b0:	f107 0310 	add.w	r3, r7, #16
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f80e 	bl	80005d6 <Lcd_init>

	return lcd;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	461d      	mov	r5, r3
 80005be:	f107 0410 	add.w	r4, r7, #16
 80005c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80005ca:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80005ce:	68f8      	ldr	r0, [r7, #12]
 80005d0:	3728      	adds	r7, #40	@ 0x28
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bdb0      	pop	{r4, r5, r7, pc}

080005d6 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b082      	sub	sp, #8
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	7d9b      	ldrb	r3, [r3, #22]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d10c      	bne.n	8000600 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80005e6:	2133      	movs	r1, #51	@ 0x33
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 f86f 	bl	80006cc <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80005ee:	2132      	movs	r1, #50	@ 0x32
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f000 f86b 	bl	80006cc <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80005f6:	2128      	movs	r1, #40	@ 0x28
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f000 f867 	bl	80006cc <lcd_write_command>
 80005fe:	e003      	b.n	8000608 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000600:	2138      	movs	r1, #56	@ 0x38
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f000 f862 	bl	80006cc <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000608:	2101      	movs	r1, #1
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f000 f85e 	bl	80006cc <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000610:	210c      	movs	r1, #12
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f000 f85a 	bl	80006cc <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000618:	2106      	movs	r1, #6
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f000 f856 	bl	80006cc <lcd_write_command>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	683a      	ldr	r2, [r7, #0]
 8000638:	4906      	ldr	r1, [pc, #24]	@ (8000654 <Lcd_int+0x2c>)
 800063a:	4618      	mov	r0, r3
 800063c:	f003 fc0a 	bl	8003e54 <siprintf>

	Lcd_string(lcd, buffer);
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	4619      	mov	r1, r3
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f000 f806 	bl	8000658 <Lcd_string>
}
 800064c:	bf00      	nop
 800064e:	3718      	adds	r7, #24
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	080047ac 	.word	0x080047ac

08000658 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000662:	2300      	movs	r3, #0
 8000664:	73fb      	strb	r3, [r7, #15]
 8000666:	e00a      	b.n	800067e <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	683a      	ldr	r2, [r7, #0]
 800066c:	4413      	add	r3, r2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f000 f858 	bl	8000728 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	3301      	adds	r3, #1
 800067c:	73fb      	strb	r3, [r7, #15]
 800067e:	7bfc      	ldrb	r4, [r7, #15]
 8000680:	6838      	ldr	r0, [r7, #0]
 8000682:	f7ff fdad 	bl	80001e0 <strlen>
 8000686:	4603      	mov	r3, r0
 8000688:	429c      	cmp	r4, r3
 800068a:	d3ed      	bcc.n	8000668 <Lcd_string+0x10>
	}
}
 800068c:	bf00      	nop
 800068e:	bf00      	nop
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	bd90      	pop	{r4, r7, pc}
	...

08000698 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	70fb      	strb	r3, [r7, #3]
 80006a4:	4613      	mov	r3, r2
 80006a6:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80006a8:	78fb      	ldrb	r3, [r7, #3]
 80006aa:	4a07      	ldr	r2, [pc, #28]	@ (80006c8 <Lcd_cursor+0x30>)
 80006ac:	5cd2      	ldrb	r2, [r2, r3]
 80006ae:	78bb      	ldrb	r3, [r7, #2]
 80006b0:	4413      	add	r3, r2
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	3b80      	subs	r3, #128	@ 0x80
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	4619      	mov	r1, r3
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f000 f806 	bl	80006cc <lcd_write_command>
	#endif
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	080048dc 	.word	0x080048dc

080006cc <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	460b      	mov	r3, r1
 80006d6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6898      	ldr	r0, [r3, #8]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	899b      	ldrh	r3, [r3, #12]
 80006e0:	2200      	movs	r2, #0
 80006e2:	4619      	mov	r1, r3
 80006e4:	f001 fc7e 	bl	8001fe4 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	7d9b      	ldrb	r3, [r3, #22]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d111      	bne.n	8000714 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80006f0:	78fb      	ldrb	r3, [r7, #3]
 80006f2:	091b      	lsrs	r3, r3, #4
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2204      	movs	r2, #4
 80006f8:	4619      	mov	r1, r3
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f000 f842 	bl	8000784 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000700:	78fb      	ldrb	r3, [r7, #3]
 8000702:	f003 030f 	and.w	r3, r3, #15
 8000706:	b2db      	uxtb	r3, r3
 8000708:	2204      	movs	r2, #4
 800070a:	4619      	mov	r1, r3
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f000 f839 	bl	8000784 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000712:	e005      	b.n	8000720 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000714:	78fb      	ldrb	r3, [r7, #3]
 8000716:	2208      	movs	r2, #8
 8000718:	4619      	mov	r1, r3
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f000 f832 	bl	8000784 <lcd_write>
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	460b      	mov	r3, r1
 8000732:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6898      	ldr	r0, [r3, #8]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	899b      	ldrh	r3, [r3, #12]
 800073c:	2201      	movs	r2, #1
 800073e:	4619      	mov	r1, r3
 8000740:	f001 fc50 	bl	8001fe4 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	7d9b      	ldrb	r3, [r3, #22]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d111      	bne.n	8000770 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	091b      	lsrs	r3, r3, #4
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2204      	movs	r2, #4
 8000754:	4619      	mov	r1, r3
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f000 f814 	bl	8000784 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800075c:	78fb      	ldrb	r3, [r7, #3]
 800075e:	f003 030f 	and.w	r3, r3, #15
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2204      	movs	r2, #4
 8000766:	4619      	mov	r1, r3
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f000 f80b 	bl	8000784 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800076e:	e005      	b.n	800077c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000770:	78fb      	ldrb	r3, [r7, #3]
 8000772:	2208      	movs	r2, #8
 8000774:	4619      	mov	r1, r3
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f000 f804 	bl	8000784 <lcd_write>
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	70fb      	strb	r3, [r7, #3]
 8000790:	4613      	mov	r3, r2
 8000792:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000794:	2300      	movs	r3, #0
 8000796:	73fb      	strb	r3, [r7, #15]
 8000798:	e019      	b.n	80007ce <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	4413      	add	r3, r2
 80007a4:	6818      	ldr	r0, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	685a      	ldr	r2, [r3, #4]
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	4413      	add	r3, r2
 80007b0:	8819      	ldrh	r1, [r3, #0]
 80007b2:	78fa      	ldrb	r2, [r7, #3]
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	fa42 f303 	asr.w	r3, r2, r3
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	461a      	mov	r2, r3
 80007c4:	f001 fc0e 	bl	8001fe4 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	3301      	adds	r3, #1
 80007cc:	73fb      	strb	r3, [r7, #15]
 80007ce:	7bfa      	ldrb	r2, [r7, #15]
 80007d0:	78bb      	ldrb	r3, [r7, #2]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d3e1      	bcc.n	800079a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6918      	ldr	r0, [r3, #16]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	8a9b      	ldrh	r3, [r3, #20]
 80007de:	2201      	movs	r2, #1
 80007e0:	4619      	mov	r1, r3
 80007e2:	f001 fbff 	bl	8001fe4 <HAL_GPIO_WritePin>
	DELAY(1);
 80007e6:	2001      	movs	r0, #1
 80007e8:	f000 fe40 	bl	800146c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6918      	ldr	r0, [r3, #16]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	8a9b      	ldrh	r3, [r3, #20]
 80007f4:	2200      	movs	r2, #0
 80007f6:	4619      	mov	r1, r3
 80007f8:	f001 fbf4 	bl	8001fe4 <HAL_GPIO_WritePin>
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b5b0      	push	{r4, r5, r7, lr}
 8000806:	b096      	sub	sp, #88	@ 0x58
 8000808:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080a:	f000 fdbd 	bl	8001388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080e:	f000 fa17 	bl	8000c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000812:	f000 fb67 	bl	8000ee4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000816:	f000 fb45 	bl	8000ea4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800081a:	f000 fb19 	bl	8000e50 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800081e:	f000 fa77 	bl	8000d10 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */



  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000822:	2100      	movs	r1, #0
 8000824:	4858      	ldr	r0, [pc, #352]	@ (8000988 <main+0x184>)
 8000826:	f002 f937 	bl	8002a98 <HAL_TIM_PWM_Start>


	Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOA, GPIOA };
 800082a:	4b58      	ldr	r3, [pc, #352]	@ (800098c <main+0x188>)
 800082c:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000830:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000832:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
	Lcd_PinType pins[] = {GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_6};
 8000836:	4a56      	ldr	r2, [pc, #344]	@ (8000990 <main+0x18c>)
 8000838:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800083c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000840:	e883 0003 	stmia.w	r3, {r0, r1}
	Lcd_HandleTypeDef lcd;
	// Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
	lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 8000844:	4638      	mov	r0, r7
 8000846:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800084a:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800084e:	2300      	movs	r3, #0
 8000850:	9303      	str	r3, [sp, #12]
 8000852:	2310      	movs	r3, #16
 8000854:	9302      	str	r3, [sp, #8]
 8000856:	4b4f      	ldr	r3, [pc, #316]	@ (8000994 <main+0x190>)
 8000858:	9301      	str	r3, [sp, #4]
 800085a:	2320      	movs	r3, #32
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	4b4d      	ldr	r3, [pc, #308]	@ (8000994 <main+0x190>)
 8000860:	f7ff fe8e 	bl	8000580 <Lcd_create>
 8000864:	f107 0418 	add.w	r4, r7, #24
 8000868:	463d      	mov	r5, r7
 800086a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800086c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800086e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000872:	e884 0003 	stmia.w	r4, {r0, r1}
	Lcd_cursor(&lcd, 0,1);
 8000876:	f107 0318 	add.w	r3, r7, #24
 800087a:	2201      	movs	r2, #1
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff ff0a 	bl	8000698 <Lcd_cursor>
	Lcd_string(&lcd, "SECONDS OF START");
 8000884:	f107 0318 	add.w	r3, r7, #24
 8000888:	4943      	ldr	r1, [pc, #268]	@ (8000998 <main+0x194>)
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fee4 	bl	8000658 <Lcd_string>
	while (1)
	{
    /* USER CODE END WHILE */


		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,pwmPulse);
 8000890:	4b42      	ldr	r3, [pc, #264]	@ (800099c <main+0x198>)
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	4b3c      	ldr	r3, [pc, #240]	@ (8000988 <main+0x184>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	635a      	str	r2, [r3, #52]	@ 0x34
		//------------------------

				time = HAL_GetTick();
 800089a:	f000 fddb 	bl	8001454 <HAL_GetTick>
 800089e:	4603      	mov	r3, r0
 80008a0:	4a3f      	ldr	r2, [pc, #252]	@ (80009a0 <main+0x19c>)
 80008a2:	6013      	str	r3, [r2, #0]
				   Lcd_cursor(&lcd, 0,18);
 80008a4:	f107 0318 	add.w	r3, r7, #24
 80008a8:	2212      	movs	r2, #18
 80008aa:	2100      	movs	r1, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fef3 	bl	8000698 <Lcd_cursor>
				       Lcd_int(&lcd, time/1000);
 80008b2:	4b3b      	ldr	r3, [pc, #236]	@ (80009a0 <main+0x19c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a3b      	ldr	r2, [pc, #236]	@ (80009a4 <main+0x1a0>)
 80008b8:	fba2 2303 	umull	r2, r3, r2, r3
 80008bc:	099b      	lsrs	r3, r3, #6
 80008be:	461a      	mov	r2, r3
 80008c0:	f107 0318 	add.w	r3, r7, #24
 80008c4:	4611      	mov	r1, r2
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff feae 	bl	8000628 <Lcd_int>

				//"a" is main menu number
				if(a < 0){a = 0;}
 80008cc:	4b36      	ldr	r3, [pc, #216]	@ (80009a8 <main+0x1a4>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	da02      	bge.n	80008da <main+0xd6>
 80008d4:	4b34      	ldr	r3, [pc, #208]	@ (80009a8 <main+0x1a4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
				if(a > 5){a = 5;}
 80008da:	4b33      	ldr	r3, [pc, #204]	@ (80009a8 <main+0x1a4>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b05      	cmp	r3, #5
 80008e0:	dd02      	ble.n	80008e8 <main+0xe4>
 80008e2:	4b31      	ldr	r3, [pc, #196]	@ (80009a8 <main+0x1a4>)
 80008e4:	2205      	movs	r2, #5
 80008e6:	601a      	str	r2, [r3, #0]
				sprintf(buffer, " Manual pwm  %d \r\n", b);
 80008e8:	4b30      	ldr	r3, [pc, #192]	@ (80009ac <main+0x1a8>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	4930      	ldr	r1, [pc, #192]	@ (80009b0 <main+0x1ac>)
 80008f0:	4830      	ldr	r0, [pc, #192]	@ (80009b4 <main+0x1b0>)
 80008f2:	f003 faaf 	bl	8003e54 <siprintf>
				HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
 80008fa:	2228      	movs	r2, #40	@ 0x28
 80008fc:	492d      	ldr	r1, [pc, #180]	@ (80009b4 <main+0x1b0>)
 80008fe:	482e      	ldr	r0, [pc, #184]	@ (80009b8 <main+0x1b4>)
 8000900:	f002 feec 	bl	80036dc <HAL_UART_Transmit>
				sprintf(buffer, "	Set number  %d \r\n",a);
 8000904:	4b28      	ldr	r3, [pc, #160]	@ (80009a8 <main+0x1a4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	461a      	mov	r2, r3
 800090a:	492c      	ldr	r1, [pc, #176]	@ (80009bc <main+0x1b8>)
 800090c:	4829      	ldr	r0, [pc, #164]	@ (80009b4 <main+0x1b0>)
 800090e:	f003 faa1 	bl	8003e54 <siprintf>
				HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 8000912:	f04f 33ff 	mov.w	r3, #4294967295
 8000916:	2228      	movs	r2, #40	@ 0x28
 8000918:	4926      	ldr	r1, [pc, #152]	@ (80009b4 <main+0x1b0>)
 800091a:	4827      	ldr	r0, [pc, #156]	@ (80009b8 <main+0x1b4>)
 800091c:	f002 fede 	bl	80036dc <HAL_UART_Transmit>

				if((b == 0))
 8000920:	4b22      	ldr	r3, [pc, #136]	@ (80009ac <main+0x1a8>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d15c      	bne.n	80009e2 <main+0x1de>
				{pa0Push =0;
 8000928:	4b25      	ldr	r3, [pc, #148]	@ (80009c0 <main+0x1bc>)
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
				pwmPulse = light_sensor;
 800092e:	4b25      	ldr	r3, [pc, #148]	@ (80009c4 <main+0x1c0>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a1a      	ldr	r2, [pc, #104]	@ (800099c <main+0x198>)
 8000934:	6013      	str	r3, [r2, #0]



				sprintf(buffer, "AUTO PWM  \r\n");
 8000936:	4924      	ldr	r1, [pc, #144]	@ (80009c8 <main+0x1c4>)
 8000938:	481e      	ldr	r0, [pc, #120]	@ (80009b4 <main+0x1b0>)
 800093a:	f003 fa8b 	bl	8003e54 <siprintf>
				HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 800093e:	f04f 33ff 	mov.w	r3, #4294967295
 8000942:	2228      	movs	r2, #40	@ 0x28
 8000944:	491b      	ldr	r1, [pc, #108]	@ (80009b4 <main+0x1b0>)
 8000946:	481c      	ldr	r0, [pc, #112]	@ (80009b8 <main+0x1b4>)
 8000948:	f002 fec8 	bl	80036dc <HAL_UART_Transmit>
				Lcd_cursor(&lcd, 1,1);
 800094c:	f107 0318 	add.w	r3, r7, #24
 8000950:	2201      	movs	r2, #1
 8000952:	2101      	movs	r1, #1
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fe9f 	bl	8000698 <Lcd_cursor>
				Lcd_string(&lcd, "AUTO PWM                  ");
 800095a:	f107 0318 	add.w	r3, r7, #24
 800095e:	491b      	ldr	r1, [pc, #108]	@ (80009cc <main+0x1c8>)
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fe79 	bl	8000658 <Lcd_string>


				while (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_4))
 8000966:	e035      	b.n	80009d4 <main+0x1d0>
				{
					pa0Push++;
 8000968:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <main+0x1bc>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	3301      	adds	r3, #1
 800096e:	4a14      	ldr	r2, [pc, #80]	@ (80009c0 <main+0x1bc>)
 8000970:	6013      	str	r3, [r2, #0]

					if ( (pa0Push > waiting_time_for_push) )
 8000972:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <main+0x1bc>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	4b16      	ldr	r3, [pc, #88]	@ (80009d0 <main+0x1cc>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	429a      	cmp	r2, r3
 800097c:	dd2a      	ble.n	80009d4 <main+0x1d0>

					{	 b = 1;
 800097e:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <main+0x1a8>)
 8000980:	2201      	movs	r2, #1
 8000982:	601a      	str	r2, [r3, #0]
					break;
 8000984:	e02d      	b.n	80009e2 <main+0x1de>
 8000986:	bf00      	nop
 8000988:	2000007c 	.word	0x2000007c
 800098c:	080048c4 	.word	0x080048c4
 8000990:	080048d4 	.word	0x080048d4
 8000994:	40020400 	.word	0x40020400
 8000998:	080047b0 	.word	0x080047b0
 800099c:	200001a4 	.word	0x200001a4
 80009a0:	20000194 	.word	0x20000194
 80009a4:	10624dd3 	.word	0x10624dd3
 80009a8:	200001a0 	.word	0x200001a0
 80009ac:	2000019c 	.word	0x2000019c
 80009b0:	080047c4 	.word	0x080047c4
 80009b4:	2000016c 	.word	0x2000016c
 80009b8:	20000124 	.word	0x20000124
 80009bc:	080047d8 	.word	0x080047d8
 80009c0:	20000198 	.word	0x20000198
 80009c4:	200001a8 	.word	0x200001a8
 80009c8:	080047ec 	.word	0x080047ec
 80009cc:	080047fc 	.word	0x080047fc
 80009d0:	20000000 	.word	0x20000000
				while (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_4))
 80009d4:	2110      	movs	r1, #16
 80009d6:	4885      	ldr	r0, [pc, #532]	@ (8000bec <main+0x3e8>)
 80009d8:	f001 faec 	bl	8001fb4 <HAL_GPIO_ReadPin>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d1c2      	bne.n	8000968 <main+0x164>

					}
				}
				}

				if(b == 1)
 80009e2:	4b83      	ldr	r3, [pc, #524]	@ (8000bf0 <main+0x3ec>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	f47f af52 	bne.w	8000890 <main+0x8c>
				{
					pa0Push = 0;
 80009ec:	4b81      	ldr	r3, [pc, #516]	@ (8000bf4 <main+0x3f0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
					Lcd_cursor(&lcd, 1,1);
 80009f2:	f107 0318 	add.w	r3, r7, #24
 80009f6:	2201      	movs	r2, #1
 80009f8:	2101      	movs	r1, #1
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fe4c 	bl	8000698 <Lcd_cursor>
					Lcd_string(&lcd, "MANUAL PWM SET");
 8000a00:	f107 0318 	add.w	r3, r7, #24
 8000a04:	497c      	ldr	r1, [pc, #496]	@ (8000bf8 <main+0x3f4>)
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fe26 	bl	8000658 <Lcd_string>

					if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0))
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	4877      	ldr	r0, [pc, #476]	@ (8000bec <main+0x3e8>)
 8000a10:	f001 fad0 	bl	8001fb4 <HAL_GPIO_ReadPin>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d007      	beq.n	8000a2a <main+0x226>
							{  a++;	//menu plus
 8000a1a:	4b78      	ldr	r3, [pc, #480]	@ (8000bfc <main+0x3f8>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	4a76      	ldr	r2, [pc, #472]	@ (8000bfc <main+0x3f8>)
 8000a22:	6013      	str	r3, [r2, #0]
							HAL_Delay (200);
 8000a24:	20c8      	movs	r0, #200	@ 0xc8
 8000a26:	f000 fd21 	bl	800146c <HAL_Delay>
							}

							if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1))
 8000a2a:	2102      	movs	r1, #2
 8000a2c:	486f      	ldr	r0, [pc, #444]	@ (8000bec <main+0x3e8>)
 8000a2e:	f001 fac1 	bl	8001fb4 <HAL_GPIO_ReadPin>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d007      	beq.n	8000a48 <main+0x244>
							{  a--;	//menu minus
 8000a38:	4b70      	ldr	r3, [pc, #448]	@ (8000bfc <main+0x3f8>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	4a6f      	ldr	r2, [pc, #444]	@ (8000bfc <main+0x3f8>)
 8000a40:	6013      	str	r3, [r2, #0]
							HAL_Delay (200);
 8000a42:	20c8      	movs	r0, #200	@ 0xc8
 8000a44:	f000 fd12 	bl	800146c <HAL_Delay>
							}

							if(a == 0)
 8000a48:	4b6c      	ldr	r3, [pc, #432]	@ (8000bfc <main+0x3f8>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d11a      	bne.n	8000a86 <main+0x282>
																{
																	sprintf(buffer, "PWM OFF		\r\n");
 8000a50:	496b      	ldr	r1, [pc, #428]	@ (8000c00 <main+0x3fc>)
 8000a52:	486c      	ldr	r0, [pc, #432]	@ (8000c04 <main+0x400>)
 8000a54:	f003 f9fe 	bl	8003e54 <siprintf>
																	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 8000a58:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5c:	2228      	movs	r2, #40	@ 0x28
 8000a5e:	4969      	ldr	r1, [pc, #420]	@ (8000c04 <main+0x400>)
 8000a60:	4869      	ldr	r0, [pc, #420]	@ (8000c08 <main+0x404>)
 8000a62:	f002 fe3b 	bl	80036dc <HAL_UART_Transmit>
																	Lcd_cursor(&lcd, 1,16);
 8000a66:	f107 0318 	add.w	r3, r7, #24
 8000a6a:	2210      	movs	r2, #16
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fe12 	bl	8000698 <Lcd_cursor>
																	Lcd_string(&lcd, "PWM OFF");
 8000a74:	f107 0318 	add.w	r3, r7, #24
 8000a78:	4964      	ldr	r1, [pc, #400]	@ (8000c0c <main+0x408>)
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fdec 	bl	8000658 <Lcd_string>
																	pwmPulse = 0;
 8000a80:	4b63      	ldr	r3, [pc, #396]	@ (8000c10 <main+0x40c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
																}

							if(a == 1)
 8000a86:	4b5d      	ldr	r3, [pc, #372]	@ (8000bfc <main+0x3f8>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d11a      	bne.n	8000ac4 <main+0x2c0>
											{
												sprintf(buffer, "PWM 20%%		\r\n");
 8000a8e:	4961      	ldr	r1, [pc, #388]	@ (8000c14 <main+0x410>)
 8000a90:	485c      	ldr	r0, [pc, #368]	@ (8000c04 <main+0x400>)
 8000a92:	f003 f9df 	bl	8003e54 <siprintf>
												HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9a:	2228      	movs	r2, #40	@ 0x28
 8000a9c:	4959      	ldr	r1, [pc, #356]	@ (8000c04 <main+0x400>)
 8000a9e:	485a      	ldr	r0, [pc, #360]	@ (8000c08 <main+0x404>)
 8000aa0:	f002 fe1c 	bl	80036dc <HAL_UART_Transmit>
												Lcd_cursor(&lcd, 1,16);
 8000aa4:	f107 0318 	add.w	r3, r7, #24
 8000aa8:	2210      	movs	r2, #16
 8000aaa:	2101      	movs	r1, #1
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fdf3 	bl	8000698 <Lcd_cursor>
												Lcd_string(&lcd, "PWM 20%            ");
 8000ab2:	f107 0318 	add.w	r3, r7, #24
 8000ab6:	4958      	ldr	r1, [pc, #352]	@ (8000c18 <main+0x414>)
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fdcd 	bl	8000658 <Lcd_string>
												pwmPulse = 20;
 8000abe:	4b54      	ldr	r3, [pc, #336]	@ (8000c10 <main+0x40c>)
 8000ac0:	2214      	movs	r2, #20
 8000ac2:	601a      	str	r2, [r3, #0]
											}
							if(a == 2)
 8000ac4:	4b4d      	ldr	r3, [pc, #308]	@ (8000bfc <main+0x3f8>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d11a      	bne.n	8000b02 <main+0x2fe>
																{
																	sprintf(buffer, "PWM 40%		\r\n");
 8000acc:	4953      	ldr	r1, [pc, #332]	@ (8000c1c <main+0x418>)
 8000ace:	484d      	ldr	r0, [pc, #308]	@ (8000c04 <main+0x400>)
 8000ad0:	f003 f9c0 	bl	8003e54 <siprintf>
																	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 8000ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad8:	2228      	movs	r2, #40	@ 0x28
 8000ada:	494a      	ldr	r1, [pc, #296]	@ (8000c04 <main+0x400>)
 8000adc:	484a      	ldr	r0, [pc, #296]	@ (8000c08 <main+0x404>)
 8000ade:	f002 fdfd 	bl	80036dc <HAL_UART_Transmit>
																	Lcd_cursor(&lcd, 1,16);
 8000ae2:	f107 0318 	add.w	r3, r7, #24
 8000ae6:	2210      	movs	r2, #16
 8000ae8:	2101      	movs	r1, #1
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fdd4 	bl	8000698 <Lcd_cursor>
																	Lcd_string(&lcd, "PWM 40%       ");
 8000af0:	f107 0318 	add.w	r3, r7, #24
 8000af4:	494a      	ldr	r1, [pc, #296]	@ (8000c20 <main+0x41c>)
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fdae 	bl	8000658 <Lcd_string>
																	pwmPulse = 40;
 8000afc:	4b44      	ldr	r3, [pc, #272]	@ (8000c10 <main+0x40c>)
 8000afe:	2228      	movs	r2, #40	@ 0x28
 8000b00:	601a      	str	r2, [r3, #0]
																}
							if(a == 3)
 8000b02:	4b3e      	ldr	r3, [pc, #248]	@ (8000bfc <main+0x3f8>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b03      	cmp	r3, #3
 8000b08:	d11a      	bne.n	8000b40 <main+0x33c>
																{
																	sprintf(buffer, "PWM 60% \r\n");
 8000b0a:	4946      	ldr	r1, [pc, #280]	@ (8000c24 <main+0x420>)
 8000b0c:	483d      	ldr	r0, [pc, #244]	@ (8000c04 <main+0x400>)
 8000b0e:	f003 f9a1 	bl	8003e54 <siprintf>
																	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 8000b12:	f04f 33ff 	mov.w	r3, #4294967295
 8000b16:	2228      	movs	r2, #40	@ 0x28
 8000b18:	493a      	ldr	r1, [pc, #232]	@ (8000c04 <main+0x400>)
 8000b1a:	483b      	ldr	r0, [pc, #236]	@ (8000c08 <main+0x404>)
 8000b1c:	f002 fdde 	bl	80036dc <HAL_UART_Transmit>
																	Lcd_cursor(&lcd, 1,16);
 8000b20:	f107 0318 	add.w	r3, r7, #24
 8000b24:	2210      	movs	r2, #16
 8000b26:	2101      	movs	r1, #1
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fdb5 	bl	8000698 <Lcd_cursor>
																	Lcd_string(&lcd, "PWM 60%  ");
 8000b2e:	f107 0318 	add.w	r3, r7, #24
 8000b32:	493d      	ldr	r1, [pc, #244]	@ (8000c28 <main+0x424>)
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fd8f 	bl	8000658 <Lcd_string>
																	pwmPulse =60;
 8000b3a:	4b35      	ldr	r3, [pc, #212]	@ (8000c10 <main+0x40c>)
 8000b3c:	223c      	movs	r2, #60	@ 0x3c
 8000b3e:	601a      	str	r2, [r3, #0]
																}
							if(a == 4)
 8000b40:	4b2e      	ldr	r3, [pc, #184]	@ (8000bfc <main+0x3f8>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b04      	cmp	r3, #4
 8000b46:	d11a      	bne.n	8000b7e <main+0x37a>
																			{
																				sprintf(buffer, "PWM 80% \r\n");
 8000b48:	4938      	ldr	r1, [pc, #224]	@ (8000c2c <main+0x428>)
 8000b4a:	482e      	ldr	r0, [pc, #184]	@ (8000c04 <main+0x400>)
 8000b4c:	f003 f982 	bl	8003e54 <siprintf>
																				HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 8000b50:	f04f 33ff 	mov.w	r3, #4294967295
 8000b54:	2228      	movs	r2, #40	@ 0x28
 8000b56:	492b      	ldr	r1, [pc, #172]	@ (8000c04 <main+0x400>)
 8000b58:	482b      	ldr	r0, [pc, #172]	@ (8000c08 <main+0x404>)
 8000b5a:	f002 fdbf 	bl	80036dc <HAL_UART_Transmit>
																				Lcd_cursor(&lcd, 1,16);
 8000b5e:	f107 0318 	add.w	r3, r7, #24
 8000b62:	2210      	movs	r2, #16
 8000b64:	2101      	movs	r1, #1
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fd96 	bl	8000698 <Lcd_cursor>
																				Lcd_string(&lcd, "PWM 80%  ");
 8000b6c:	f107 0318 	add.w	r3, r7, #24
 8000b70:	492f      	ldr	r1, [pc, #188]	@ (8000c30 <main+0x42c>)
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fd70 	bl	8000658 <Lcd_string>
																				pwmPulse = 80;
 8000b78:	4b25      	ldr	r3, [pc, #148]	@ (8000c10 <main+0x40c>)
 8000b7a:	2250      	movs	r2, #80	@ 0x50
 8000b7c:	601a      	str	r2, [r3, #0]
																			}
							if(a == 5)
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bfc <main+0x3f8>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b05      	cmp	r3, #5
 8000b84:	d12a      	bne.n	8000bdc <main+0x3d8>
																			{
																				sprintf(buffer, "PWM 100% \r\n");
 8000b86:	492b      	ldr	r1, [pc, #172]	@ (8000c34 <main+0x430>)
 8000b88:	481e      	ldr	r0, [pc, #120]	@ (8000c04 <main+0x400>)
 8000b8a:	f003 f963 	bl	8003e54 <siprintf>
																				HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b92:	2228      	movs	r2, #40	@ 0x28
 8000b94:	491b      	ldr	r1, [pc, #108]	@ (8000c04 <main+0x400>)
 8000b96:	481c      	ldr	r0, [pc, #112]	@ (8000c08 <main+0x404>)
 8000b98:	f002 fda0 	bl	80036dc <HAL_UART_Transmit>
																				Lcd_cursor(&lcd, 1,16);
 8000b9c:	f107 0318 	add.w	r3, r7, #24
 8000ba0:	2210      	movs	r2, #16
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fd77 	bl	8000698 <Lcd_cursor>
																				Lcd_string(&lcd, "PWM 100% ");
 8000baa:	f107 0318 	add.w	r3, r7, #24
 8000bae:	4922      	ldr	r1, [pc, #136]	@ (8000c38 <main+0x434>)
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fd51 	bl	8000658 <Lcd_string>
																				pwmPulse =100;
 8000bb6:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <main+0x40c>)
 8000bb8:	2264      	movs	r2, #100	@ 0x64
 8000bba:	601a      	str	r2, [r3, #0]
																			}



					while (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_4))
 8000bbc:	e00e      	b.n	8000bdc <main+0x3d8>
					{
						pa0Push++;
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <main+0x3f0>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf4 <main+0x3f0>)
 8000bc6:	6013      	str	r3, [r2, #0]

						if ( (pa0Push > waiting_time_for_push) )
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <main+0x3f0>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c3c <main+0x438>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	dd03      	ble.n	8000bdc <main+0x3d8>

						{	 b = 0;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <main+0x3ec>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
						break;
 8000bda:	e006      	b.n	8000bea <main+0x3e6>
					while (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_4))
 8000bdc:	2110      	movs	r1, #16
 8000bde:	4803      	ldr	r0, [pc, #12]	@ (8000bec <main+0x3e8>)
 8000be0:	f001 f9e8 	bl	8001fb4 <HAL_GPIO_ReadPin>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d1e9      	bne.n	8000bbe <main+0x3ba>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,pwmPulse);
 8000bea:	e651      	b.n	8000890 <main+0x8c>
 8000bec:	40020000 	.word	0x40020000
 8000bf0:	2000019c 	.word	0x2000019c
 8000bf4:	20000198 	.word	0x20000198
 8000bf8:	08004818 	.word	0x08004818
 8000bfc:	200001a0 	.word	0x200001a0
 8000c00:	08004828 	.word	0x08004828
 8000c04:	2000016c 	.word	0x2000016c
 8000c08:	20000124 	.word	0x20000124
 8000c0c:	08004834 	.word	0x08004834
 8000c10:	200001a4 	.word	0x200001a4
 8000c14:	0800483c 	.word	0x0800483c
 8000c18:	0800484c 	.word	0x0800484c
 8000c1c:	08004860 	.word	0x08004860
 8000c20:	0800486c 	.word	0x0800486c
 8000c24:	0800487c 	.word	0x0800487c
 8000c28:	08004888 	.word	0x08004888
 8000c2c:	08004894 	.word	0x08004894
 8000c30:	080048a0 	.word	0x080048a0
 8000c34:	080048ac 	.word	0x080048ac
 8000c38:	080048b8 	.word	0x080048b8
 8000c3c:	20000000 	.word	0x20000000

08000c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b094      	sub	sp, #80	@ 0x50
 8000c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c46:	f107 0320 	add.w	r3, r7, #32
 8000c4a:	2230      	movs	r2, #48	@ 0x30
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f003 f920 	bl	8003e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	4b27      	ldr	r3, [pc, #156]	@ (8000d08 <SystemClock_Config+0xc8>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6c:	4a26      	ldr	r2, [pc, #152]	@ (8000d08 <SystemClock_Config+0xc8>)
 8000c6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c74:	4b24      	ldr	r3, [pc, #144]	@ (8000d08 <SystemClock_Config+0xc8>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c80:	2300      	movs	r3, #0
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	4b21      	ldr	r3, [pc, #132]	@ (8000d0c <SystemClock_Config+0xcc>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a20      	ldr	r2, [pc, #128]	@ (8000d0c <SystemClock_Config+0xcc>)
 8000c8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c8e:	6013      	str	r3, [r2, #0]
 8000c90:	4b1e      	ldr	r3, [pc, #120]	@ (8000d0c <SystemClock_Config+0xcc>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca4:	2310      	movs	r3, #16
 8000ca6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cac:	2300      	movs	r3, #0
 8000cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cb0:	2308      	movs	r3, #8
 8000cb2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000cb4:	2348      	movs	r3, #72	@ 0x48
 8000cb6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cbc:	2304      	movs	r3, #4
 8000cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc0:	f107 0320 	add.w	r3, r7, #32
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f001 f9a7 	bl	8002018 <HAL_RCC_OscConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cd0:	f000 f9aa 	bl	8001028 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ce0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ce4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	2102      	movs	r1, #2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f001 fc09 	bl	8002508 <HAL_RCC_ClockConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000cfc:	f000 f994 	bl	8001028 <Error_Handler>
  }
}
 8000d00:	bf00      	nop
 8000d02:	3750      	adds	r7, #80	@ 0x50
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40007000 	.word	0x40007000

08000d10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b096      	sub	sp, #88	@ 0x58
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d16:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d24:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
 8000d3c:	611a      	str	r2, [r3, #16]
 8000d3e:	615a      	str	r2, [r3, #20]
 8000d40:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	2220      	movs	r2, #32
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f003 f8a3 	bl	8003e94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d4e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e48 <MX_TIM1_Init+0x138>)
 8000d50:	4a3e      	ldr	r2, [pc, #248]	@ (8000e4c <MX_TIM1_Init+0x13c>)
 8000d52:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d54:	4b3c      	ldr	r3, [pc, #240]	@ (8000e48 <MX_TIM1_Init+0x138>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5a:	4b3b      	ldr	r3, [pc, #236]	@ (8000e48 <MX_TIM1_Init+0x138>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000d60:	4b39      	ldr	r3, [pc, #228]	@ (8000e48 <MX_TIM1_Init+0x138>)
 8000d62:	2264      	movs	r2, #100	@ 0x64
 8000d64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d66:	4b38      	ldr	r3, [pc, #224]	@ (8000e48 <MX_TIM1_Init+0x138>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d6c:	4b36      	ldr	r3, [pc, #216]	@ (8000e48 <MX_TIM1_Init+0x138>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d72:	4b35      	ldr	r3, [pc, #212]	@ (8000e48 <MX_TIM1_Init+0x138>)
 8000d74:	2280      	movs	r2, #128	@ 0x80
 8000d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d78:	4833      	ldr	r0, [pc, #204]	@ (8000e48 <MX_TIM1_Init+0x138>)
 8000d7a:	f001 fde5 	bl	8002948 <HAL_TIM_Base_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000d84:	f000 f950 	bl	8001028 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d8e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d92:	4619      	mov	r1, r3
 8000d94:	482c      	ldr	r0, [pc, #176]	@ (8000e48 <MX_TIM1_Init+0x138>)
 8000d96:	f001 fff1 	bl	8002d7c <HAL_TIM_ConfigClockSource>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000da0:	f000 f942 	bl	8001028 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000da4:	4828      	ldr	r0, [pc, #160]	@ (8000e48 <MX_TIM1_Init+0x138>)
 8000da6:	f001 fe1e 	bl	80029e6 <HAL_TIM_PWM_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000db0:	f000 f93a 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db4:	2300      	movs	r3, #0
 8000db6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dbc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4821      	ldr	r0, [pc, #132]	@ (8000e48 <MX_TIM1_Init+0x138>)
 8000dc4:	f002 fb7a 	bl	80034bc <HAL_TIMEx_MasterConfigSynchronization>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000dce:	f000 f92b 	bl	8001028 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dd2:	2360      	movs	r3, #96	@ 0x60
 8000dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 25;
 8000dd6:	2319      	movs	r3, #25
 8000dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dde:	2300      	movs	r3, #0
 8000de0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000de6:	2300      	movs	r3, #0
 8000de8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dea:	2300      	movs	r3, #0
 8000dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000df2:	2200      	movs	r2, #0
 8000df4:	4619      	mov	r1, r3
 8000df6:	4814      	ldr	r0, [pc, #80]	@ (8000e48 <MX_TIM1_Init+0x138>)
 8000df8:	f001 fefe 	bl	8002bf8 <HAL_TIM_PWM_ConfigChannel>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000e02:	f000 f911 	bl	8001028 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e1e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	4619      	mov	r1, r3
 8000e28:	4807      	ldr	r0, [pc, #28]	@ (8000e48 <MX_TIM1_Init+0x138>)
 8000e2a:	f002 fbb5 	bl	8003598 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000e34:	f000 f8f8 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e38:	4803      	ldr	r0, [pc, #12]	@ (8000e48 <MX_TIM1_Init+0x138>)
 8000e3a:	f000 f977 	bl	800112c <HAL_TIM_MspPostInit>

}
 8000e3e:	bf00      	nop
 8000e40:	3758      	adds	r7, #88	@ 0x58
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	2000007c 	.word	0x2000007c
 8000e4c:	40010000 	.word	0x40010000

08000e50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e54:	4b11      	ldr	r3, [pc, #68]	@ (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e56:	4a12      	ldr	r2, [pc, #72]	@ (8000ea0 <MX_USART2_UART_Init+0x50>)
 8000e58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	@ (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	@ (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e74:	4b09      	ldr	r3, [pc, #36]	@ (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e76:	220c      	movs	r2, #12
 8000e78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e80:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e86:	4805      	ldr	r0, [pc, #20]	@ (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e88:	f002 fbd8 	bl	800363c <HAL_UART_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e92:	f000 f8c9 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000124 	.word	0x20000124
 8000ea0:	40004400 	.word	0x40004400

08000ea4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <MX_DMA_Init+0x3c>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ee0 <MX_DMA_Init+0x3c>)
 8000eb4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eba:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <MX_DMA_Init+0x3c>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2039      	movs	r0, #57	@ 0x39
 8000ecc:	f000 fbcd 	bl	800166a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000ed0:	2039      	movs	r0, #57	@ 0x39
 8000ed2:	f000 fbe6 	bl	80016a2 <HAL_NVIC_EnableIRQ>

}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800

08000ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	@ 0x28
 8000ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	4b46      	ldr	r3, [pc, #280]	@ (8001018 <MX_GPIO_Init+0x134>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	4a45      	ldr	r2, [pc, #276]	@ (8001018 <MX_GPIO_Init+0x134>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0a:	4b43      	ldr	r3, [pc, #268]	@ (8001018 <MX_GPIO_Init+0x134>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8001018 <MX_GPIO_Init+0x134>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	4a3e      	ldr	r2, [pc, #248]	@ (8001018 <MX_GPIO_Init+0x134>)
 8000f20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f26:	4b3c      	ldr	r3, [pc, #240]	@ (8001018 <MX_GPIO_Init+0x134>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	4b38      	ldr	r3, [pc, #224]	@ (8001018 <MX_GPIO_Init+0x134>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	4a37      	ldr	r2, [pc, #220]	@ (8001018 <MX_GPIO_Init+0x134>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f42:	4b35      	ldr	r3, [pc, #212]	@ (8001018 <MX_GPIO_Init+0x134>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	4b31      	ldr	r3, [pc, #196]	@ (8001018 <MX_GPIO_Init+0x134>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a30      	ldr	r2, [pc, #192]	@ (8001018 <MX_GPIO_Init+0x134>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b2e      	ldr	r3, [pc, #184]	@ (8001018 <MX_GPIO_Init+0x134>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	21e0      	movs	r1, #224	@ 0xe0
 8000f6e:	482b      	ldr	r0, [pc, #172]	@ (800101c <MX_GPIO_Init+0x138>)
 8000f70:	f001 f838 	bl	8001fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2180      	movs	r1, #128	@ 0x80
 8000f78:	4829      	ldr	r0, [pc, #164]	@ (8001020 <MX_GPIO_Init+0x13c>)
 8000f7a:	f001 f833 	bl	8001fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2170      	movs	r1, #112	@ 0x70
 8000f82:	4828      	ldr	r0, [pc, #160]	@ (8001024 <MX_GPIO_Init+0x140>)
 8000f84:	f001 f82e 	bl	8001fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f8e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4820      	ldr	r0, [pc, #128]	@ (8001020 <MX_GPIO_Init+0x13c>)
 8000fa0:	f000 fe84 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000fa4:	2313      	movs	r3, #19
 8000fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4819      	ldr	r0, [pc, #100]	@ (800101c <MX_GPIO_Init+0x138>)
 8000fb8:	f000 fe78 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fbc:	23e0      	movs	r3, #224	@ 0xe0
 8000fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4812      	ldr	r0, [pc, #72]	@ (800101c <MX_GPIO_Init+0x138>)
 8000fd4:	f000 fe6a 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fd8:	2380      	movs	r3, #128	@ 0x80
 8000fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	480c      	ldr	r0, [pc, #48]	@ (8001020 <MX_GPIO_Init+0x13c>)
 8000ff0:	f000 fe5c 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000ff4:	2370      	movs	r3, #112	@ 0x70
 8000ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	4806      	ldr	r0, [pc, #24]	@ (8001024 <MX_GPIO_Init+0x140>)
 800100c:	f000 fe4e 	bl	8001cac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001010:	bf00      	nop
 8001012:	3728      	adds	r7, #40	@ 0x28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40023800 	.word	0x40023800
 800101c:	40020000 	.word	0x40020000
 8001020:	40020800 	.word	0x40020800
 8001024:	40020400 	.word	0x40020400

08001028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <Error_Handler+0x8>

08001034 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	4b10      	ldr	r3, [pc, #64]	@ (8001080 <HAL_MspInit+0x4c>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001042:	4a0f      	ldr	r2, [pc, #60]	@ (8001080 <HAL_MspInit+0x4c>)
 8001044:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001048:	6453      	str	r3, [r2, #68]	@ 0x44
 800104a:	4b0d      	ldr	r3, [pc, #52]	@ (8001080 <HAL_MspInit+0x4c>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <HAL_MspInit+0x4c>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105e:	4a08      	ldr	r2, [pc, #32]	@ (8001080 <HAL_MspInit+0x4c>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001064:	6413      	str	r3, [r2, #64]	@ 0x40
 8001066:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <HAL_MspInit+0x4c>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001072:	2007      	movs	r0, #7
 8001074:	f000 faee 	bl	8001654 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40023800 	.word	0x40023800

08001084 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a22      	ldr	r2, [pc, #136]	@ (800111c <HAL_TIM_Base_MspInit+0x98>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d13d      	bne.n	8001112 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b21      	ldr	r3, [pc, #132]	@ (8001120 <HAL_TIM_Base_MspInit+0x9c>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800109e:	4a20      	ldr	r2, [pc, #128]	@ (8001120 <HAL_TIM_Base_MspInit+0x9c>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001120 <HAL_TIM_Base_MspInit+0x9c>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80010b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <HAL_TIM_Base_MspInit+0xa0>)
 80010b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001128 <HAL_TIM_Base_MspInit+0xa4>)
 80010b6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80010b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001124 <HAL_TIM_Base_MspInit+0xa0>)
 80010ba:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80010be:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010c0:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <HAL_TIM_Base_MspInit+0xa0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c6:	4b17      	ldr	r3, [pc, #92]	@ (8001124 <HAL_TIM_Base_MspInit+0xa0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80010cc:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <HAL_TIM_Base_MspInit+0xa0>)
 80010ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010d2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010d4:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <HAL_TIM_Base_MspInit+0xa0>)
 80010d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010da:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010dc:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <HAL_TIM_Base_MspInit+0xa0>)
 80010de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010e2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <HAL_TIM_Base_MspInit+0xa0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <HAL_TIM_Base_MspInit+0xa0>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <HAL_TIM_Base_MspInit+0xa0>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80010f6:	480b      	ldr	r0, [pc, #44]	@ (8001124 <HAL_TIM_Base_MspInit+0xa0>)
 80010f8:	f000 faee 	bl	80016d8 <HAL_DMA_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001102:	f7ff ff91 	bl	8001028 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a06      	ldr	r2, [pc, #24]	@ (8001124 <HAL_TIM_Base_MspInit+0xa0>)
 800110a:	625a      	str	r2, [r3, #36]	@ 0x24
 800110c:	4a05      	ldr	r2, [pc, #20]	@ (8001124 <HAL_TIM_Base_MspInit+0xa0>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40010000 	.word	0x40010000
 8001120:	40023800 	.word	0x40023800
 8001124:	200000c4 	.word	0x200000c4
 8001128:	40026428 	.word	0x40026428

0800112c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a12      	ldr	r2, [pc, #72]	@ (8001194 <HAL_TIM_MspPostInit+0x68>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d11e      	bne.n	800118c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <HAL_TIM_MspPostInit+0x6c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a10      	ldr	r2, [pc, #64]	@ (8001198 <HAL_TIM_MspPostInit+0x6c>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <HAL_TIM_MspPostInit+0x6c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800116a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800116e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800117c:	2301      	movs	r3, #1
 800117e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	4619      	mov	r1, r3
 8001186:	4805      	ldr	r0, [pc, #20]	@ (800119c <HAL_TIM_MspPostInit+0x70>)
 8001188:	f000 fd90 	bl	8001cac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800118c:	bf00      	nop
 800118e:	3720      	adds	r7, #32
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40010000 	.word	0x40010000
 8001198:	40023800 	.word	0x40023800
 800119c:	40020000 	.word	0x40020000

080011a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	@ 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a19      	ldr	r2, [pc, #100]	@ (8001224 <HAL_UART_MspInit+0x84>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d12b      	bne.n	800121a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	4b18      	ldr	r3, [pc, #96]	@ (8001228 <HAL_UART_MspInit+0x88>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ca:	4a17      	ldr	r2, [pc, #92]	@ (8001228 <HAL_UART_MspInit+0x88>)
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d2:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <HAL_UART_MspInit+0x88>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <HAL_UART_MspInit+0x88>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	4a10      	ldr	r2, [pc, #64]	@ (8001228 <HAL_UART_MspInit+0x88>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001228 <HAL_UART_MspInit+0x88>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011fa:	230c      	movs	r3, #12
 80011fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800120a:	2307      	movs	r3, #7
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	@ (800122c <HAL_UART_MspInit+0x8c>)
 8001216:	f000 fd49 	bl	8001cac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800121a:	bf00      	nop
 800121c:	3728      	adds	r7, #40	@ 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40004400 	.word	0x40004400
 8001228:	40023800 	.word	0x40023800
 800122c:	40020000 	.word	0x40020000

08001230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <NMI_Handler+0x4>

08001238 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <HardFault_Handler+0x4>

08001240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <MemManage_Handler+0x4>

08001248 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <BusFault_Handler+0x4>

08001250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <UsageFault_Handler+0x4>

08001258 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001286:	f000 f8d1 	bl	800142c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001294:	4802      	ldr	r0, [pc, #8]	@ (80012a0 <DMA2_Stream1_IRQHandler+0x10>)
 8001296:	f000 facd 	bl	8001834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200000c4 	.word	0x200000c4

080012a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012ac:	4a14      	ldr	r2, [pc, #80]	@ (8001300 <_sbrk+0x5c>)
 80012ae:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <_sbrk+0x60>)
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b8:	4b13      	ldr	r3, [pc, #76]	@ (8001308 <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c0:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <_sbrk+0x64>)
 80012c2:	4a12      	ldr	r2, [pc, #72]	@ (800130c <_sbrk+0x68>)
 80012c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c6:	4b10      	ldr	r3, [pc, #64]	@ (8001308 <_sbrk+0x64>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d207      	bcs.n	80012e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d4:	f002 fde6 	bl	8003ea4 <__errno>
 80012d8:	4603      	mov	r3, r0
 80012da:	220c      	movs	r2, #12
 80012dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
 80012e2:	e009      	b.n	80012f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e4:	4b08      	ldr	r3, [pc, #32]	@ (8001308 <_sbrk+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ea:	4b07      	ldr	r3, [pc, #28]	@ (8001308 <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	4a05      	ldr	r2, [pc, #20]	@ (8001308 <_sbrk+0x64>)
 80012f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012f6:	68fb      	ldr	r3, [r7, #12]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20020000 	.word	0x20020000
 8001304:	00000400 	.word	0x00000400
 8001308:	200001ac 	.word	0x200001ac
 800130c:	20000300 	.word	0x20000300

08001310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001314:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <SystemInit+0x20>)
 8001316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800131a:	4a05      	ldr	r2, [pc, #20]	@ (8001330 <SystemInit+0x20>)
 800131c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001320:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001334:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800136c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001338:	f7ff ffea 	bl	8001310 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800133c:	480c      	ldr	r0, [pc, #48]	@ (8001370 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800133e:	490d      	ldr	r1, [pc, #52]	@ (8001374 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001340:	4a0d      	ldr	r2, [pc, #52]	@ (8001378 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001344:	e002      	b.n	800134c <LoopCopyDataInit>

08001346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134a:	3304      	adds	r3, #4

0800134c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800134c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001350:	d3f9      	bcc.n	8001346 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001352:	4a0a      	ldr	r2, [pc, #40]	@ (800137c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001354:	4c0a      	ldr	r4, [pc, #40]	@ (8001380 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001358:	e001      	b.n	800135e <LoopFillZerobss>

0800135a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800135c:	3204      	adds	r2, #4

0800135e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001360:	d3fb      	bcc.n	800135a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001362:	f002 fda5 	bl	8003eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001366:	f7ff fa4d 	bl	8000804 <main>
  bx  lr    
 800136a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800136c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001374:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001378:	08004944 	.word	0x08004944
  ldr r2, =_sbss
 800137c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001380:	200002fc 	.word	0x200002fc

08001384 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001384:	e7fe      	b.n	8001384 <ADC_IRQHandler>
	...

08001388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800138c:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <HAL_Init+0x40>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0d      	ldr	r2, [pc, #52]	@ (80013c8 <HAL_Init+0x40>)
 8001392:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001396:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001398:	4b0b      	ldr	r3, [pc, #44]	@ (80013c8 <HAL_Init+0x40>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0a      	ldr	r2, [pc, #40]	@ (80013c8 <HAL_Init+0x40>)
 800139e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a4:	4b08      	ldr	r3, [pc, #32]	@ (80013c8 <HAL_Init+0x40>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a07      	ldr	r2, [pc, #28]	@ (80013c8 <HAL_Init+0x40>)
 80013aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b0:	2003      	movs	r0, #3
 80013b2:	f000 f94f 	bl	8001654 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b6:	2000      	movs	r0, #0
 80013b8:	f000 f808 	bl	80013cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013bc:	f7ff fe3a 	bl	8001034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40023c00 	.word	0x40023c00

080013cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d4:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <HAL_InitTick+0x54>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <HAL_InitTick+0x58>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4619      	mov	r1, r3
 80013de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f967 	bl	80016be <HAL_SYSTICK_Config>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00e      	b.n	8001418 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b0f      	cmp	r3, #15
 80013fe:	d80a      	bhi.n	8001416 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001400:	2200      	movs	r2, #0
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	f000 f92f 	bl	800166a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800140c:	4a06      	ldr	r2, [pc, #24]	@ (8001428 <HAL_InitTick+0x5c>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001412:	2300      	movs	r3, #0
 8001414:	e000      	b.n	8001418 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000004 	.word	0x20000004
 8001424:	2000000c 	.word	0x2000000c
 8001428:	20000008 	.word	0x20000008

0800142c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <HAL_IncTick+0x20>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <HAL_IncTick+0x24>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4413      	add	r3, r2
 800143c:	4a04      	ldr	r2, [pc, #16]	@ (8001450 <HAL_IncTick+0x24>)
 800143e:	6013      	str	r3, [r2, #0]
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	2000000c 	.word	0x2000000c
 8001450:	200001b0 	.word	0x200001b0

08001454 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return uwTick;
 8001458:	4b03      	ldr	r3, [pc, #12]	@ (8001468 <HAL_GetTick+0x14>)
 800145a:	681b      	ldr	r3, [r3, #0]
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	200001b0 	.word	0x200001b0

0800146c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001474:	f7ff ffee 	bl	8001454 <HAL_GetTick>
 8001478:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001484:	d005      	beq.n	8001492 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001486:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <HAL_Delay+0x44>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4413      	add	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001492:	bf00      	nop
 8001494:	f7ff ffde 	bl	8001454 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d8f7      	bhi.n	8001494 <HAL_Delay+0x28>
  {
  }
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	2000000c 	.word	0x2000000c

080014b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c4:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014d0:	4013      	ands	r3, r2
 80014d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e6:	4a04      	ldr	r2, [pc, #16]	@ (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	60d3      	str	r3, [r2, #12]
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001500:	4b04      	ldr	r3, [pc, #16]	@ (8001514 <__NVIC_GetPriorityGrouping+0x18>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	0a1b      	lsrs	r3, r3, #8
 8001506:	f003 0307 	and.w	r3, r3, #7
}
 800150a:	4618      	mov	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	2b00      	cmp	r3, #0
 8001528:	db0b      	blt.n	8001542 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	f003 021f 	and.w	r2, r3, #31
 8001530:	4907      	ldr	r1, [pc, #28]	@ (8001550 <__NVIC_EnableIRQ+0x38>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	095b      	lsrs	r3, r3, #5
 8001538:	2001      	movs	r0, #1
 800153a:	fa00 f202 	lsl.w	r2, r0, r2
 800153e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000e100 	.word	0xe000e100

08001554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	6039      	str	r1, [r7, #0]
 800155e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001564:	2b00      	cmp	r3, #0
 8001566:	db0a      	blt.n	800157e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	b2da      	uxtb	r2, r3
 800156c:	490c      	ldr	r1, [pc, #48]	@ (80015a0 <__NVIC_SetPriority+0x4c>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	0112      	lsls	r2, r2, #4
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	440b      	add	r3, r1
 8001578:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800157c:	e00a      	b.n	8001594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	b2da      	uxtb	r2, r3
 8001582:	4908      	ldr	r1, [pc, #32]	@ (80015a4 <__NVIC_SetPriority+0x50>)
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	3b04      	subs	r3, #4
 800158c:	0112      	lsls	r2, r2, #4
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	440b      	add	r3, r1
 8001592:	761a      	strb	r2, [r3, #24]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000e100 	.word	0xe000e100
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b089      	sub	sp, #36	@ 0x24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f1c3 0307 	rsb	r3, r3, #7
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	bf28      	it	cs
 80015c6:	2304      	movcs	r3, #4
 80015c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3304      	adds	r3, #4
 80015ce:	2b06      	cmp	r3, #6
 80015d0:	d902      	bls.n	80015d8 <NVIC_EncodePriority+0x30>
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3b03      	subs	r3, #3
 80015d6:	e000      	b.n	80015da <NVIC_EncodePriority+0x32>
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015dc:	f04f 32ff 	mov.w	r2, #4294967295
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43da      	mvns	r2, r3
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	401a      	ands	r2, r3
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f0:	f04f 31ff 	mov.w	r1, #4294967295
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	fa01 f303 	lsl.w	r3, r1, r3
 80015fa:	43d9      	mvns	r1, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	4313      	orrs	r3, r2
         );
}
 8001602:	4618      	mov	r0, r3
 8001604:	3724      	adds	r7, #36	@ 0x24
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3b01      	subs	r3, #1
 800161c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001620:	d301      	bcc.n	8001626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001622:	2301      	movs	r3, #1
 8001624:	e00f      	b.n	8001646 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001626:	4a0a      	ldr	r2, [pc, #40]	@ (8001650 <SysTick_Config+0x40>)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3b01      	subs	r3, #1
 800162c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800162e:	210f      	movs	r1, #15
 8001630:	f04f 30ff 	mov.w	r0, #4294967295
 8001634:	f7ff ff8e 	bl	8001554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001638:	4b05      	ldr	r3, [pc, #20]	@ (8001650 <SysTick_Config+0x40>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800163e:	4b04      	ldr	r3, [pc, #16]	@ (8001650 <SysTick_Config+0x40>)
 8001640:	2207      	movs	r2, #7
 8001642:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	e000e010 	.word	0xe000e010

08001654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff ff29 	bl	80014b4 <__NVIC_SetPriorityGrouping>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800166a:	b580      	push	{r7, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af00      	add	r7, sp, #0
 8001670:	4603      	mov	r3, r0
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
 8001676:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800167c:	f7ff ff3e 	bl	80014fc <__NVIC_GetPriorityGrouping>
 8001680:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	68b9      	ldr	r1, [r7, #8]
 8001686:	6978      	ldr	r0, [r7, #20]
 8001688:	f7ff ff8e 	bl	80015a8 <NVIC_EncodePriority>
 800168c:	4602      	mov	r2, r0
 800168e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001692:	4611      	mov	r1, r2
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff5d 	bl	8001554 <__NVIC_SetPriority>
}
 800169a:	bf00      	nop
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff31 	bl	8001518 <__NVIC_EnableIRQ>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ffa2 	bl	8001610 <SysTick_Config>
 80016cc:	4603      	mov	r3, r0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016e4:	f7ff feb6 	bl	8001454 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e099      	b.n	8001828 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2202      	movs	r2, #2
 80016f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0201 	bic.w	r2, r2, #1
 8001712:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001714:	e00f      	b.n	8001736 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001716:	f7ff fe9d 	bl	8001454 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b05      	cmp	r3, #5
 8001722:	d908      	bls.n	8001736 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2220      	movs	r2, #32
 8001728:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2203      	movs	r2, #3
 800172e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e078      	b.n	8001828 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1e8      	bne.n	8001716 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	4b38      	ldr	r3, [pc, #224]	@ (8001830 <HAL_DMA_Init+0x158>)
 8001750:	4013      	ands	r3, r2
 8001752:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001762:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800176e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800177a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	4313      	orrs	r3, r2
 8001786:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178c:	2b04      	cmp	r3, #4
 800178e:	d107      	bne.n	80017a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001798:	4313      	orrs	r3, r2
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	4313      	orrs	r3, r2
 800179e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f023 0307 	bic.w	r3, r3, #7
 80017b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	4313      	orrs	r3, r2
 80017c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	d117      	bne.n	80017fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00e      	beq.n	80017fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 f9e9 	bl	8001bb4 <DMA_CheckFifoParam>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d008      	beq.n	80017fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2240      	movs	r2, #64	@ 0x40
 80017ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80017f6:	2301      	movs	r3, #1
 80017f8:	e016      	b.n	8001828 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 f9a0 	bl	8001b48 <DMA_CalcBaseAndBitshift>
 8001808:	4603      	mov	r3, r0
 800180a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001810:	223f      	movs	r2, #63	@ 0x3f
 8001812:	409a      	lsls	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	f010803f 	.word	0xf010803f

08001834 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001840:	4b8e      	ldr	r3, [pc, #568]	@ (8001a7c <HAL_DMA_IRQHandler+0x248>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a8e      	ldr	r2, [pc, #568]	@ (8001a80 <HAL_DMA_IRQHandler+0x24c>)
 8001846:	fba2 2303 	umull	r2, r3, r2, r3
 800184a:	0a9b      	lsrs	r3, r3, #10
 800184c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001852:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800185e:	2208      	movs	r2, #8
 8001860:	409a      	lsls	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4013      	ands	r3, r2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d01a      	beq.n	80018a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d013      	beq.n	80018a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0204 	bic.w	r2, r2, #4
 8001886:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800188c:	2208      	movs	r2, #8
 800188e:	409a      	lsls	r2, r3
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001898:	f043 0201 	orr.w	r2, r3, #1
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a4:	2201      	movs	r2, #1
 80018a6:	409a      	lsls	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4013      	ands	r3, r2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d012      	beq.n	80018d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00b      	beq.n	80018d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c2:	2201      	movs	r2, #1
 80018c4:	409a      	lsls	r2, r3
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ce:	f043 0202 	orr.w	r2, r3, #2
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018da:	2204      	movs	r2, #4
 80018dc:	409a      	lsls	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4013      	ands	r3, r2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d012      	beq.n	800190c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00b      	beq.n	800190c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f8:	2204      	movs	r2, #4
 80018fa:	409a      	lsls	r2, r3
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001904:	f043 0204 	orr.w	r2, r3, #4
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001910:	2210      	movs	r2, #16
 8001912:	409a      	lsls	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d043      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d03c      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800192e:	2210      	movs	r2, #16
 8001930:	409a      	lsls	r2, r3
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d018      	beq.n	8001976 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d108      	bne.n	8001964 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	2b00      	cmp	r3, #0
 8001958:	d024      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	4798      	blx	r3
 8001962:	e01f      	b.n	80019a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001968:	2b00      	cmp	r3, #0
 800196a:	d01b      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	4798      	blx	r3
 8001974:	e016      	b.n	80019a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001980:	2b00      	cmp	r3, #0
 8001982:	d107      	bne.n	8001994 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0208 	bic.w	r2, r2, #8
 8001992:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019a8:	2220      	movs	r2, #32
 80019aa:	409a      	lsls	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4013      	ands	r3, r2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 808f 	beq.w	8001ad4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0310 	and.w	r3, r3, #16
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 8087 	beq.w	8001ad4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ca:	2220      	movs	r2, #32
 80019cc:	409a      	lsls	r2, r3
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b05      	cmp	r3, #5
 80019dc:	d136      	bne.n	8001a4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 0216 	bic.w	r2, r2, #22
 80019ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	695a      	ldr	r2, [r3, #20]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d103      	bne.n	8001a0e <HAL_DMA_IRQHandler+0x1da>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d007      	beq.n	8001a1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0208 	bic.w	r2, r2, #8
 8001a1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a22:	223f      	movs	r2, #63	@ 0x3f
 8001a24:	409a      	lsls	r2, r3
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d07e      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	4798      	blx	r3
        }
        return;
 8001a4a:	e079      	b.n	8001b40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d01d      	beq.n	8001a96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d10d      	bne.n	8001a84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d031      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	4798      	blx	r3
 8001a78:	e02c      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x2a0>
 8001a7a:	bf00      	nop
 8001a7c:	20000004 	.word	0x20000004
 8001a80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d023      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	4798      	blx	r3
 8001a94:	e01e      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10f      	bne.n	8001ac4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0210 	bic.w	r2, r2, #16
 8001ab2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d032      	beq.n	8001b42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d022      	beq.n	8001b2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2205      	movs	r2, #5
 8001aec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0201 	bic.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	3301      	adds	r3, #1
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d307      	bcc.n	8001b1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f2      	bne.n	8001b00 <HAL_DMA_IRQHandler+0x2cc>
 8001b1a:	e000      	b.n	8001b1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d005      	beq.n	8001b42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	4798      	blx	r3
 8001b3e:	e000      	b.n	8001b42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b40:	bf00      	nop
    }
  }
}
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	3b10      	subs	r3, #16
 8001b58:	4a14      	ldr	r2, [pc, #80]	@ (8001bac <DMA_CalcBaseAndBitshift+0x64>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	091b      	lsrs	r3, r3, #4
 8001b60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b62:	4a13      	ldr	r2, [pc, #76]	@ (8001bb0 <DMA_CalcBaseAndBitshift+0x68>)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d909      	bls.n	8001b8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001b7e:	f023 0303 	bic.w	r3, r3, #3
 8001b82:	1d1a      	adds	r2, r3, #4
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b88:	e007      	b.n	8001b9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001b92:	f023 0303 	bic.w	r3, r3, #3
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	aaaaaaab 	.word	0xaaaaaaab
 8001bb0:	080048f8 	.word	0x080048f8

08001bb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d11f      	bne.n	8001c0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	d856      	bhi.n	8001c82 <DMA_CheckFifoParam+0xce>
 8001bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8001bdc <DMA_CheckFifoParam+0x28>)
 8001bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bda:	bf00      	nop
 8001bdc:	08001bed 	.word	0x08001bed
 8001be0:	08001bff 	.word	0x08001bff
 8001be4:	08001bed 	.word	0x08001bed
 8001be8:	08001c83 	.word	0x08001c83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d046      	beq.n	8001c86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bfc:	e043      	b.n	8001c86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c02:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c06:	d140      	bne.n	8001c8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c0c:	e03d      	b.n	8001c8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c16:	d121      	bne.n	8001c5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d837      	bhi.n	8001c8e <DMA_CheckFifoParam+0xda>
 8001c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c24 <DMA_CheckFifoParam+0x70>)
 8001c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c24:	08001c35 	.word	0x08001c35
 8001c28:	08001c3b 	.word	0x08001c3b
 8001c2c:	08001c35 	.word	0x08001c35
 8001c30:	08001c4d 	.word	0x08001c4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
      break;
 8001c38:	e030      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d025      	beq.n	8001c92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c4a:	e022      	b.n	8001c92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c50:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c54:	d11f      	bne.n	8001c96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c5a:	e01c      	b.n	8001c96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d903      	bls.n	8001c6a <DMA_CheckFifoParam+0xb6>
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	2b03      	cmp	r3, #3
 8001c66:	d003      	beq.n	8001c70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c68:	e018      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8001c6e:	e015      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00e      	beq.n	8001c9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8001c80:	e00b      	b.n	8001c9a <DMA_CheckFifoParam+0xe6>
      break;
 8001c82:	bf00      	nop
 8001c84:	e00a      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      break;
 8001c86:	bf00      	nop
 8001c88:	e008      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      break;
 8001c8a:	bf00      	nop
 8001c8c:	e006      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      break;
 8001c8e:	bf00      	nop
 8001c90:	e004      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      break;
 8001c92:	bf00      	nop
 8001c94:	e002      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      break;   
 8001c96:	bf00      	nop
 8001c98:	e000      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      break;
 8001c9a:	bf00      	nop
    }
  } 
  
  return status; 
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop

08001cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	@ 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
 8001cc6:	e159      	b.n	8001f7c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	f040 8148 	bne.w	8001f76 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d005      	beq.n	8001cfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d130      	bne.n	8001d60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	2203      	movs	r2, #3
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	68da      	ldr	r2, [r3, #12]
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d34:	2201      	movs	r2, #1
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	091b      	lsrs	r3, r3, #4
 8001d4a:	f003 0201 	and.w	r2, r3, #1
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d017      	beq.n	8001d9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	2203      	movs	r2, #3
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d123      	bne.n	8001df0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	08da      	lsrs	r2, r3, #3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3208      	adds	r2, #8
 8001db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	220f      	movs	r2, #15
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	691a      	ldr	r2, [r3, #16]
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	08da      	lsrs	r2, r3, #3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3208      	adds	r2, #8
 8001dea:	69b9      	ldr	r1, [r7, #24]
 8001dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0203 	and.w	r2, r3, #3
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 80a2 	beq.w	8001f76 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	4b57      	ldr	r3, [pc, #348]	@ (8001f94 <HAL_GPIO_Init+0x2e8>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3a:	4a56      	ldr	r2, [pc, #344]	@ (8001f94 <HAL_GPIO_Init+0x2e8>)
 8001e3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e42:	4b54      	ldr	r3, [pc, #336]	@ (8001f94 <HAL_GPIO_Init+0x2e8>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e4e:	4a52      	ldr	r2, [pc, #328]	@ (8001f98 <HAL_GPIO_Init+0x2ec>)
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	089b      	lsrs	r3, r3, #2
 8001e54:	3302      	adds	r3, #2
 8001e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	220f      	movs	r2, #15
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a49      	ldr	r2, [pc, #292]	@ (8001f9c <HAL_GPIO_Init+0x2f0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d019      	beq.n	8001eae <HAL_GPIO_Init+0x202>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a48      	ldr	r2, [pc, #288]	@ (8001fa0 <HAL_GPIO_Init+0x2f4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d013      	beq.n	8001eaa <HAL_GPIO_Init+0x1fe>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a47      	ldr	r2, [pc, #284]	@ (8001fa4 <HAL_GPIO_Init+0x2f8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d00d      	beq.n	8001ea6 <HAL_GPIO_Init+0x1fa>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a46      	ldr	r2, [pc, #280]	@ (8001fa8 <HAL_GPIO_Init+0x2fc>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d007      	beq.n	8001ea2 <HAL_GPIO_Init+0x1f6>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a45      	ldr	r2, [pc, #276]	@ (8001fac <HAL_GPIO_Init+0x300>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d101      	bne.n	8001e9e <HAL_GPIO_Init+0x1f2>
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	e008      	b.n	8001eb0 <HAL_GPIO_Init+0x204>
 8001e9e:	2307      	movs	r3, #7
 8001ea0:	e006      	b.n	8001eb0 <HAL_GPIO_Init+0x204>
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e004      	b.n	8001eb0 <HAL_GPIO_Init+0x204>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e002      	b.n	8001eb0 <HAL_GPIO_Init+0x204>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <HAL_GPIO_Init+0x204>
 8001eae:	2300      	movs	r3, #0
 8001eb0:	69fa      	ldr	r2, [r7, #28]
 8001eb2:	f002 0203 	and.w	r2, r2, #3
 8001eb6:	0092      	lsls	r2, r2, #2
 8001eb8:	4093      	lsls	r3, r2
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ec0:	4935      	ldr	r1, [pc, #212]	@ (8001f98 <HAL_GPIO_Init+0x2ec>)
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	089b      	lsrs	r3, r3, #2
 8001ec6:	3302      	adds	r3, #2
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ece:	4b38      	ldr	r3, [pc, #224]	@ (8001fb0 <HAL_GPIO_Init+0x304>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ef2:	4a2f      	ldr	r2, [pc, #188]	@ (8001fb0 <HAL_GPIO_Init+0x304>)
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb0 <HAL_GPIO_Init+0x304>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f1c:	4a24      	ldr	r2, [pc, #144]	@ (8001fb0 <HAL_GPIO_Init+0x304>)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f22:	4b23      	ldr	r3, [pc, #140]	@ (8001fb0 <HAL_GPIO_Init+0x304>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f46:	4a1a      	ldr	r2, [pc, #104]	@ (8001fb0 <HAL_GPIO_Init+0x304>)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f4c:	4b18      	ldr	r3, [pc, #96]	@ (8001fb0 <HAL_GPIO_Init+0x304>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f70:	4a0f      	ldr	r2, [pc, #60]	@ (8001fb0 <HAL_GPIO_Init+0x304>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	61fb      	str	r3, [r7, #28]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	2b0f      	cmp	r3, #15
 8001f80:	f67f aea2 	bls.w	8001cc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f84:	bf00      	nop
 8001f86:	bf00      	nop
 8001f88:	3724      	adds	r7, #36	@ 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40013800 	.word	0x40013800
 8001f9c:	40020000 	.word	0x40020000
 8001fa0:	40020400 	.word	0x40020400
 8001fa4:	40020800 	.word	0x40020800
 8001fa8:	40020c00 	.word	0x40020c00
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40013c00 	.word	0x40013c00

08001fb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	887b      	ldrh	r3, [r7, #2]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d002      	beq.n	8001fd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	73fb      	strb	r3, [r7, #15]
 8001fd0:	e001      	b.n	8001fd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	807b      	strh	r3, [r7, #2]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ff4:	787b      	ldrb	r3, [r7, #1]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ffa:	887a      	ldrh	r2, [r7, #2]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002000:	e003      	b.n	800200a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002002:	887b      	ldrh	r3, [r7, #2]
 8002004:	041a      	lsls	r2, r3, #16
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	619a      	str	r2, [r3, #24]
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e267      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d075      	beq.n	8002122 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002036:	4b88      	ldr	r3, [pc, #544]	@ (8002258 <HAL_RCC_OscConfig+0x240>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 030c 	and.w	r3, r3, #12
 800203e:	2b04      	cmp	r3, #4
 8002040:	d00c      	beq.n	800205c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002042:	4b85      	ldr	r3, [pc, #532]	@ (8002258 <HAL_RCC_OscConfig+0x240>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800204a:	2b08      	cmp	r3, #8
 800204c:	d112      	bne.n	8002074 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800204e:	4b82      	ldr	r3, [pc, #520]	@ (8002258 <HAL_RCC_OscConfig+0x240>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002056:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800205a:	d10b      	bne.n	8002074 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205c:	4b7e      	ldr	r3, [pc, #504]	@ (8002258 <HAL_RCC_OscConfig+0x240>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d05b      	beq.n	8002120 <HAL_RCC_OscConfig+0x108>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d157      	bne.n	8002120 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e242      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800207c:	d106      	bne.n	800208c <HAL_RCC_OscConfig+0x74>
 800207e:	4b76      	ldr	r3, [pc, #472]	@ (8002258 <HAL_RCC_OscConfig+0x240>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a75      	ldr	r2, [pc, #468]	@ (8002258 <HAL_RCC_OscConfig+0x240>)
 8002084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	e01d      	b.n	80020c8 <HAL_RCC_OscConfig+0xb0>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002094:	d10c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x98>
 8002096:	4b70      	ldr	r3, [pc, #448]	@ (8002258 <HAL_RCC_OscConfig+0x240>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a6f      	ldr	r2, [pc, #444]	@ (8002258 <HAL_RCC_OscConfig+0x240>)
 800209c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002258 <HAL_RCC_OscConfig+0x240>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a6c      	ldr	r2, [pc, #432]	@ (8002258 <HAL_RCC_OscConfig+0x240>)
 80020a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	e00b      	b.n	80020c8 <HAL_RCC_OscConfig+0xb0>
 80020b0:	4b69      	ldr	r3, [pc, #420]	@ (8002258 <HAL_RCC_OscConfig+0x240>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a68      	ldr	r2, [pc, #416]	@ (8002258 <HAL_RCC_OscConfig+0x240>)
 80020b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	4b66      	ldr	r3, [pc, #408]	@ (8002258 <HAL_RCC_OscConfig+0x240>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a65      	ldr	r2, [pc, #404]	@ (8002258 <HAL_RCC_OscConfig+0x240>)
 80020c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d013      	beq.n	80020f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7ff f9c0 	bl	8001454 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d8:	f7ff f9bc 	bl	8001454 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b64      	cmp	r3, #100	@ 0x64
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e207      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	4b5b      	ldr	r3, [pc, #364]	@ (8002258 <HAL_RCC_OscConfig+0x240>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0f0      	beq.n	80020d8 <HAL_RCC_OscConfig+0xc0>
 80020f6:	e014      	b.n	8002122 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f8:	f7ff f9ac 	bl	8001454 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002100:	f7ff f9a8 	bl	8001454 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b64      	cmp	r3, #100	@ 0x64
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e1f3      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002112:	4b51      	ldr	r3, [pc, #324]	@ (8002258 <HAL_RCC_OscConfig+0x240>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0xe8>
 800211e:	e000      	b.n	8002122 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d063      	beq.n	80021f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800212e:	4b4a      	ldr	r3, [pc, #296]	@ (8002258 <HAL_RCC_OscConfig+0x240>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 030c 	and.w	r3, r3, #12
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00b      	beq.n	8002152 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800213a:	4b47      	ldr	r3, [pc, #284]	@ (8002258 <HAL_RCC_OscConfig+0x240>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002142:	2b08      	cmp	r3, #8
 8002144:	d11c      	bne.n	8002180 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002146:	4b44      	ldr	r3, [pc, #272]	@ (8002258 <HAL_RCC_OscConfig+0x240>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d116      	bne.n	8002180 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002152:	4b41      	ldr	r3, [pc, #260]	@ (8002258 <HAL_RCC_OscConfig+0x240>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d005      	beq.n	800216a <HAL_RCC_OscConfig+0x152>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d001      	beq.n	800216a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e1c7      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216a:	4b3b      	ldr	r3, [pc, #236]	@ (8002258 <HAL_RCC_OscConfig+0x240>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4937      	ldr	r1, [pc, #220]	@ (8002258 <HAL_RCC_OscConfig+0x240>)
 800217a:	4313      	orrs	r3, r2
 800217c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217e:	e03a      	b.n	80021f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d020      	beq.n	80021ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002188:	4b34      	ldr	r3, [pc, #208]	@ (800225c <HAL_RCC_OscConfig+0x244>)
 800218a:	2201      	movs	r2, #1
 800218c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218e:	f7ff f961 	bl	8001454 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002196:	f7ff f95d 	bl	8001454 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e1a8      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002258 <HAL_RCC_OscConfig+0x240>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0f0      	beq.n	8002196 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b4:	4b28      	ldr	r3, [pc, #160]	@ (8002258 <HAL_RCC_OscConfig+0x240>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	4925      	ldr	r1, [pc, #148]	@ (8002258 <HAL_RCC_OscConfig+0x240>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	600b      	str	r3, [r1, #0]
 80021c8:	e015      	b.n	80021f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ca:	4b24      	ldr	r3, [pc, #144]	@ (800225c <HAL_RCC_OscConfig+0x244>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7ff f940 	bl	8001454 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021d8:	f7ff f93c 	bl	8001454 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e187      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002258 <HAL_RCC_OscConfig+0x240>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d036      	beq.n	8002270 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d016      	beq.n	8002238 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800220a:	4b15      	ldr	r3, [pc, #84]	@ (8002260 <HAL_RCC_OscConfig+0x248>)
 800220c:	2201      	movs	r2, #1
 800220e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002210:	f7ff f920 	bl	8001454 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002218:	f7ff f91c 	bl	8001454 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e167      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222a:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <HAL_RCC_OscConfig+0x240>)
 800222c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x200>
 8002236:	e01b      	b.n	8002270 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002238:	4b09      	ldr	r3, [pc, #36]	@ (8002260 <HAL_RCC_OscConfig+0x248>)
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223e:	f7ff f909 	bl	8001454 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002244:	e00e      	b.n	8002264 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002246:	f7ff f905 	bl	8001454 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d907      	bls.n	8002264 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e150      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
 8002258:	40023800 	.word	0x40023800
 800225c:	42470000 	.word	0x42470000
 8002260:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002264:	4b88      	ldr	r3, [pc, #544]	@ (8002488 <HAL_RCC_OscConfig+0x470>)
 8002266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1ea      	bne.n	8002246 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 8097 	beq.w	80023ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800227e:	2300      	movs	r3, #0
 8002280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002282:	4b81      	ldr	r3, [pc, #516]	@ (8002488 <HAL_RCC_OscConfig+0x470>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10f      	bne.n	80022ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	4b7d      	ldr	r3, [pc, #500]	@ (8002488 <HAL_RCC_OscConfig+0x470>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002296:	4a7c      	ldr	r2, [pc, #496]	@ (8002488 <HAL_RCC_OscConfig+0x470>)
 8002298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800229c:	6413      	str	r3, [r2, #64]	@ 0x40
 800229e:	4b7a      	ldr	r3, [pc, #488]	@ (8002488 <HAL_RCC_OscConfig+0x470>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022aa:	2301      	movs	r3, #1
 80022ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ae:	4b77      	ldr	r3, [pc, #476]	@ (800248c <HAL_RCC_OscConfig+0x474>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d118      	bne.n	80022ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ba:	4b74      	ldr	r3, [pc, #464]	@ (800248c <HAL_RCC_OscConfig+0x474>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a73      	ldr	r2, [pc, #460]	@ (800248c <HAL_RCC_OscConfig+0x474>)
 80022c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c6:	f7ff f8c5 	bl	8001454 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ce:	f7ff f8c1 	bl	8001454 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e10c      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e0:	4b6a      	ldr	r3, [pc, #424]	@ (800248c <HAL_RCC_OscConfig+0x474>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d106      	bne.n	8002302 <HAL_RCC_OscConfig+0x2ea>
 80022f4:	4b64      	ldr	r3, [pc, #400]	@ (8002488 <HAL_RCC_OscConfig+0x470>)
 80022f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f8:	4a63      	ldr	r2, [pc, #396]	@ (8002488 <HAL_RCC_OscConfig+0x470>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002300:	e01c      	b.n	800233c <HAL_RCC_OscConfig+0x324>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2b05      	cmp	r3, #5
 8002308:	d10c      	bne.n	8002324 <HAL_RCC_OscConfig+0x30c>
 800230a:	4b5f      	ldr	r3, [pc, #380]	@ (8002488 <HAL_RCC_OscConfig+0x470>)
 800230c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800230e:	4a5e      	ldr	r2, [pc, #376]	@ (8002488 <HAL_RCC_OscConfig+0x470>)
 8002310:	f043 0304 	orr.w	r3, r3, #4
 8002314:	6713      	str	r3, [r2, #112]	@ 0x70
 8002316:	4b5c      	ldr	r3, [pc, #368]	@ (8002488 <HAL_RCC_OscConfig+0x470>)
 8002318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800231a:	4a5b      	ldr	r2, [pc, #364]	@ (8002488 <HAL_RCC_OscConfig+0x470>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6713      	str	r3, [r2, #112]	@ 0x70
 8002322:	e00b      	b.n	800233c <HAL_RCC_OscConfig+0x324>
 8002324:	4b58      	ldr	r3, [pc, #352]	@ (8002488 <HAL_RCC_OscConfig+0x470>)
 8002326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002328:	4a57      	ldr	r2, [pc, #348]	@ (8002488 <HAL_RCC_OscConfig+0x470>)
 800232a:	f023 0301 	bic.w	r3, r3, #1
 800232e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002330:	4b55      	ldr	r3, [pc, #340]	@ (8002488 <HAL_RCC_OscConfig+0x470>)
 8002332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002334:	4a54      	ldr	r2, [pc, #336]	@ (8002488 <HAL_RCC_OscConfig+0x470>)
 8002336:	f023 0304 	bic.w	r3, r3, #4
 800233a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d015      	beq.n	8002370 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002344:	f7ff f886 	bl	8001454 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234a:	e00a      	b.n	8002362 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800234c:	f7ff f882 	bl	8001454 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800235a:	4293      	cmp	r3, r2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e0cb      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002362:	4b49      	ldr	r3, [pc, #292]	@ (8002488 <HAL_RCC_OscConfig+0x470>)
 8002364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0ee      	beq.n	800234c <HAL_RCC_OscConfig+0x334>
 800236e:	e014      	b.n	800239a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002370:	f7ff f870 	bl	8001454 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002376:	e00a      	b.n	800238e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002378:	f7ff f86c 	bl	8001454 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002386:	4293      	cmp	r3, r2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e0b5      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238e:	4b3e      	ldr	r3, [pc, #248]	@ (8002488 <HAL_RCC_OscConfig+0x470>)
 8002390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1ee      	bne.n	8002378 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800239a:	7dfb      	ldrb	r3, [r7, #23]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d105      	bne.n	80023ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a0:	4b39      	ldr	r3, [pc, #228]	@ (8002488 <HAL_RCC_OscConfig+0x470>)
 80023a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a4:	4a38      	ldr	r2, [pc, #224]	@ (8002488 <HAL_RCC_OscConfig+0x470>)
 80023a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 80a1 	beq.w	80024f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023b6:	4b34      	ldr	r3, [pc, #208]	@ (8002488 <HAL_RCC_OscConfig+0x470>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 030c 	and.w	r3, r3, #12
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d05c      	beq.n	800247c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d141      	bne.n	800244e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ca:	4b31      	ldr	r3, [pc, #196]	@ (8002490 <HAL_RCC_OscConfig+0x478>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7ff f840 	bl	8001454 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d8:	f7ff f83c 	bl	8001454 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e087      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ea:	4b27      	ldr	r3, [pc, #156]	@ (8002488 <HAL_RCC_OscConfig+0x470>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69da      	ldr	r2, [r3, #28]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002404:	019b      	lsls	r3, r3, #6
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240c:	085b      	lsrs	r3, r3, #1
 800240e:	3b01      	subs	r3, #1
 8002410:	041b      	lsls	r3, r3, #16
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002418:	061b      	lsls	r3, r3, #24
 800241a:	491b      	ldr	r1, [pc, #108]	@ (8002488 <HAL_RCC_OscConfig+0x470>)
 800241c:	4313      	orrs	r3, r2
 800241e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002420:	4b1b      	ldr	r3, [pc, #108]	@ (8002490 <HAL_RCC_OscConfig+0x478>)
 8002422:	2201      	movs	r2, #1
 8002424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002426:	f7ff f815 	bl	8001454 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800242e:	f7ff f811 	bl	8001454 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e05c      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002440:	4b11      	ldr	r3, [pc, #68]	@ (8002488 <HAL_RCC_OscConfig+0x470>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0x416>
 800244c:	e054      	b.n	80024f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244e:	4b10      	ldr	r3, [pc, #64]	@ (8002490 <HAL_RCC_OscConfig+0x478>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7fe fffe 	bl	8001454 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800245c:	f7fe fffa 	bl	8001454 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e045      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246e:	4b06      	ldr	r3, [pc, #24]	@ (8002488 <HAL_RCC_OscConfig+0x470>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0x444>
 800247a:	e03d      	b.n	80024f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d107      	bne.n	8002494 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e038      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
 8002488:	40023800 	.word	0x40023800
 800248c:	40007000 	.word	0x40007000
 8002490:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002494:	4b1b      	ldr	r3, [pc, #108]	@ (8002504 <HAL_RCC_OscConfig+0x4ec>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d028      	beq.n	80024f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d121      	bne.n	80024f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d11a      	bne.n	80024f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024c4:	4013      	ands	r3, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d111      	bne.n	80024f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024da:	085b      	lsrs	r3, r3, #1
 80024dc:	3b01      	subs	r3, #1
 80024de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d107      	bne.n	80024f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800

08002508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0cc      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800251c:	4b68      	ldr	r3, [pc, #416]	@ (80026c0 <HAL_RCC_ClockConfig+0x1b8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d90c      	bls.n	8002544 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252a:	4b65      	ldr	r3, [pc, #404]	@ (80026c0 <HAL_RCC_ClockConfig+0x1b8>)
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002532:	4b63      	ldr	r3, [pc, #396]	@ (80026c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d001      	beq.n	8002544 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0b8      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d020      	beq.n	8002592 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800255c:	4b59      	ldr	r3, [pc, #356]	@ (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	4a58      	ldr	r2, [pc, #352]	@ (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002566:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d005      	beq.n	8002580 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002574:	4b53      	ldr	r3, [pc, #332]	@ (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	4a52      	ldr	r2, [pc, #328]	@ (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800257e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002580:	4b50      	ldr	r3, [pc, #320]	@ (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	494d      	ldr	r1, [pc, #308]	@ (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	4313      	orrs	r3, r2
 8002590:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d044      	beq.n	8002628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d107      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a6:	4b47      	ldr	r3, [pc, #284]	@ (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d119      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e07f      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d003      	beq.n	80025c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d107      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c6:	4b3f      	ldr	r3, [pc, #252]	@ (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e06f      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d6:	4b3b      	ldr	r3, [pc, #236]	@ (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e067      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025e6:	4b37      	ldr	r3, [pc, #220]	@ (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f023 0203 	bic.w	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4934      	ldr	r1, [pc, #208]	@ (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025f8:	f7fe ff2c 	bl	8001454 <HAL_GetTick>
 80025fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fe:	e00a      	b.n	8002616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002600:	f7fe ff28 	bl	8001454 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800260e:	4293      	cmp	r3, r2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e04f      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002616:	4b2b      	ldr	r3, [pc, #172]	@ (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 020c 	and.w	r2, r3, #12
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	429a      	cmp	r2, r3
 8002626:	d1eb      	bne.n	8002600 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002628:	4b25      	ldr	r3, [pc, #148]	@ (80026c0 <HAL_RCC_ClockConfig+0x1b8>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d20c      	bcs.n	8002650 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002636:	4b22      	ldr	r3, [pc, #136]	@ (80026c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800263e:	4b20      	ldr	r3, [pc, #128]	@ (80026c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d001      	beq.n	8002650 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e032      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800265c:	4b19      	ldr	r3, [pc, #100]	@ (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4916      	ldr	r1, [pc, #88]	@ (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	4313      	orrs	r3, r2
 800266c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d009      	beq.n	800268e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800267a:	4b12      	ldr	r3, [pc, #72]	@ (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	490e      	ldr	r1, [pc, #56]	@ (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	4313      	orrs	r3, r2
 800268c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800268e:	f000 f821 	bl	80026d4 <HAL_RCC_GetSysClockFreq>
 8002692:	4602      	mov	r2, r0
 8002694:	4b0b      	ldr	r3, [pc, #44]	@ (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	490a      	ldr	r1, [pc, #40]	@ (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 80026a0:	5ccb      	ldrb	r3, [r1, r3]
 80026a2:	fa22 f303 	lsr.w	r3, r2, r3
 80026a6:	4a09      	ldr	r2, [pc, #36]	@ (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026aa:	4b09      	ldr	r3, [pc, #36]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe fe8c 	bl	80013cc <HAL_InitTick>

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40023c00 	.word	0x40023c00
 80026c4:	40023800 	.word	0x40023800
 80026c8:	080048e0 	.word	0x080048e0
 80026cc:	20000004 	.word	0x20000004
 80026d0:	20000008 	.word	0x20000008

080026d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026d8:	b094      	sub	sp, #80	@ 0x50
 80026da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	647b      	str	r3, [r7, #68]	@ 0x44
 80026e0:	2300      	movs	r3, #0
 80026e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026e4:	2300      	movs	r3, #0
 80026e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026ec:	4b79      	ldr	r3, [pc, #484]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 030c 	and.w	r3, r3, #12
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d00d      	beq.n	8002714 <HAL_RCC_GetSysClockFreq+0x40>
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	f200 80e1 	bhi.w	80028c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <HAL_RCC_GetSysClockFreq+0x34>
 8002702:	2b04      	cmp	r3, #4
 8002704:	d003      	beq.n	800270e <HAL_RCC_GetSysClockFreq+0x3a>
 8002706:	e0db      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002708:	4b73      	ldr	r3, [pc, #460]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800270a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800270c:	e0db      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800270e:	4b73      	ldr	r3, [pc, #460]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x208>)
 8002710:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002712:	e0d8      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002714:	4b6f      	ldr	r3, [pc, #444]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800271c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800271e:	4b6d      	ldr	r3, [pc, #436]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d063      	beq.n	80027f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800272a:	4b6a      	ldr	r3, [pc, #424]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	099b      	lsrs	r3, r3, #6
 8002730:	2200      	movs	r2, #0
 8002732:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002734:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800273c:	633b      	str	r3, [r7, #48]	@ 0x30
 800273e:	2300      	movs	r3, #0
 8002740:	637b      	str	r3, [r7, #52]	@ 0x34
 8002742:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002746:	4622      	mov	r2, r4
 8002748:	462b      	mov	r3, r5
 800274a:	f04f 0000 	mov.w	r0, #0
 800274e:	f04f 0100 	mov.w	r1, #0
 8002752:	0159      	lsls	r1, r3, #5
 8002754:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002758:	0150      	lsls	r0, r2, #5
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4621      	mov	r1, r4
 8002760:	1a51      	subs	r1, r2, r1
 8002762:	6139      	str	r1, [r7, #16]
 8002764:	4629      	mov	r1, r5
 8002766:	eb63 0301 	sbc.w	r3, r3, r1
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002778:	4659      	mov	r1, fp
 800277a:	018b      	lsls	r3, r1, #6
 800277c:	4651      	mov	r1, sl
 800277e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002782:	4651      	mov	r1, sl
 8002784:	018a      	lsls	r2, r1, #6
 8002786:	4651      	mov	r1, sl
 8002788:	ebb2 0801 	subs.w	r8, r2, r1
 800278c:	4659      	mov	r1, fp
 800278e:	eb63 0901 	sbc.w	r9, r3, r1
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800279e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027a6:	4690      	mov	r8, r2
 80027a8:	4699      	mov	r9, r3
 80027aa:	4623      	mov	r3, r4
 80027ac:	eb18 0303 	adds.w	r3, r8, r3
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	462b      	mov	r3, r5
 80027b4:	eb49 0303 	adc.w	r3, r9, r3
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027c6:	4629      	mov	r1, r5
 80027c8:	024b      	lsls	r3, r1, #9
 80027ca:	4621      	mov	r1, r4
 80027cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027d0:	4621      	mov	r1, r4
 80027d2:	024a      	lsls	r2, r1, #9
 80027d4:	4610      	mov	r0, r2
 80027d6:	4619      	mov	r1, r3
 80027d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027da:	2200      	movs	r2, #0
 80027dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027e4:	f7fd fd54 	bl	8000290 <__aeabi_uldivmod>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4613      	mov	r3, r2
 80027ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027f0:	e058      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f2:	4b38      	ldr	r3, [pc, #224]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	099b      	lsrs	r3, r3, #6
 80027f8:	2200      	movs	r2, #0
 80027fa:	4618      	mov	r0, r3
 80027fc:	4611      	mov	r1, r2
 80027fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002802:	623b      	str	r3, [r7, #32]
 8002804:	2300      	movs	r3, #0
 8002806:	627b      	str	r3, [r7, #36]	@ 0x24
 8002808:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800280c:	4642      	mov	r2, r8
 800280e:	464b      	mov	r3, r9
 8002810:	f04f 0000 	mov.w	r0, #0
 8002814:	f04f 0100 	mov.w	r1, #0
 8002818:	0159      	lsls	r1, r3, #5
 800281a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800281e:	0150      	lsls	r0, r2, #5
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4641      	mov	r1, r8
 8002826:	ebb2 0a01 	subs.w	sl, r2, r1
 800282a:	4649      	mov	r1, r9
 800282c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800283c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002840:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002844:	ebb2 040a 	subs.w	r4, r2, sl
 8002848:	eb63 050b 	sbc.w	r5, r3, fp
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	00eb      	lsls	r3, r5, #3
 8002856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800285a:	00e2      	lsls	r2, r4, #3
 800285c:	4614      	mov	r4, r2
 800285e:	461d      	mov	r5, r3
 8002860:	4643      	mov	r3, r8
 8002862:	18e3      	adds	r3, r4, r3
 8002864:	603b      	str	r3, [r7, #0]
 8002866:	464b      	mov	r3, r9
 8002868:	eb45 0303 	adc.w	r3, r5, r3
 800286c:	607b      	str	r3, [r7, #4]
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	e9d7 4500 	ldrd	r4, r5, [r7]
 800287a:	4629      	mov	r1, r5
 800287c:	028b      	lsls	r3, r1, #10
 800287e:	4621      	mov	r1, r4
 8002880:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002884:	4621      	mov	r1, r4
 8002886:	028a      	lsls	r2, r1, #10
 8002888:	4610      	mov	r0, r2
 800288a:	4619      	mov	r1, r3
 800288c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800288e:	2200      	movs	r2, #0
 8002890:	61bb      	str	r3, [r7, #24]
 8002892:	61fa      	str	r2, [r7, #28]
 8002894:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002898:	f7fd fcfa 	bl	8000290 <__aeabi_uldivmod>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4613      	mov	r3, r2
 80028a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028a4:	4b0b      	ldr	r3, [pc, #44]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	0c1b      	lsrs	r3, r3, #16
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	3301      	adds	r3, #1
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80028b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028be:	e002      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028c0:	4b05      	ldr	r3, [pc, #20]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80028c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3750      	adds	r7, #80	@ 0x50
 80028cc:	46bd      	mov	sp, r7
 80028ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800
 80028d8:	00f42400 	.word	0x00f42400
 80028dc:	007a1200 	.word	0x007a1200

080028e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028e4:	4b03      	ldr	r3, [pc, #12]	@ (80028f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028e6:	681b      	ldr	r3, [r3, #0]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	20000004 	.word	0x20000004

080028f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028fc:	f7ff fff0 	bl	80028e0 <HAL_RCC_GetHCLKFreq>
 8002900:	4602      	mov	r2, r0
 8002902:	4b05      	ldr	r3, [pc, #20]	@ (8002918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	0a9b      	lsrs	r3, r3, #10
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	4903      	ldr	r1, [pc, #12]	@ (800291c <HAL_RCC_GetPCLK1Freq+0x24>)
 800290e:	5ccb      	ldrb	r3, [r1, r3]
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002914:	4618      	mov	r0, r3
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40023800 	.word	0x40023800
 800291c:	080048f0 	.word	0x080048f0

08002920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002924:	f7ff ffdc 	bl	80028e0 <HAL_RCC_GetHCLKFreq>
 8002928:	4602      	mov	r2, r0
 800292a:	4b05      	ldr	r3, [pc, #20]	@ (8002940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	0b5b      	lsrs	r3, r3, #13
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	4903      	ldr	r1, [pc, #12]	@ (8002944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002936:	5ccb      	ldrb	r3, [r1, r3]
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800293c:	4618      	mov	r0, r3
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40023800 	.word	0x40023800
 8002944:	080048f0 	.word	0x080048f0

08002948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e041      	b.n	80029de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7fe fb88 	bl	8001084 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3304      	adds	r3, #4
 8002984:	4619      	mov	r1, r3
 8002986:	4610      	mov	r0, r2
 8002988:	f000 fac0 	bl	8002f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e041      	b.n	8002a7c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d106      	bne.n	8002a12 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f839 	bl	8002a84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2202      	movs	r2, #2
 8002a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3304      	adds	r3, #4
 8002a22:	4619      	mov	r1, r3
 8002a24:	4610      	mov	r0, r2
 8002a26:	f000 fa71 	bl	8002f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d109      	bne.n	8002abc <HAL_TIM_PWM_Start+0x24>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	bf14      	ite	ne
 8002ab4:	2301      	movne	r3, #1
 8002ab6:	2300      	moveq	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	e022      	b.n	8002b02 <HAL_TIM_PWM_Start+0x6a>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d109      	bne.n	8002ad6 <HAL_TIM_PWM_Start+0x3e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	bf14      	ite	ne
 8002ace:	2301      	movne	r3, #1
 8002ad0:	2300      	moveq	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	e015      	b.n	8002b02 <HAL_TIM_PWM_Start+0x6a>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d109      	bne.n	8002af0 <HAL_TIM_PWM_Start+0x58>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	bf14      	ite	ne
 8002ae8:	2301      	movne	r3, #1
 8002aea:	2300      	moveq	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	e008      	b.n	8002b02 <HAL_TIM_PWM_Start+0x6a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	bf14      	ite	ne
 8002afc:	2301      	movne	r3, #1
 8002afe:	2300      	moveq	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e068      	b.n	8002bdc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d104      	bne.n	8002b1a <HAL_TIM_PWM_Start+0x82>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b18:	e013      	b.n	8002b42 <HAL_TIM_PWM_Start+0xaa>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d104      	bne.n	8002b2a <HAL_TIM_PWM_Start+0x92>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b28:	e00b      	b.n	8002b42 <HAL_TIM_PWM_Start+0xaa>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d104      	bne.n	8002b3a <HAL_TIM_PWM_Start+0xa2>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b38:	e003      	b.n	8002b42 <HAL_TIM_PWM_Start+0xaa>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2201      	movs	r2, #1
 8002b48:	6839      	ldr	r1, [r7, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fc90 	bl	8003470 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a23      	ldr	r2, [pc, #140]	@ (8002be4 <HAL_TIM_PWM_Start+0x14c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d107      	bne.n	8002b6a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b68:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8002be4 <HAL_TIM_PWM_Start+0x14c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d018      	beq.n	8002ba6 <HAL_TIM_PWM_Start+0x10e>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b7c:	d013      	beq.n	8002ba6 <HAL_TIM_PWM_Start+0x10e>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a19      	ldr	r2, [pc, #100]	@ (8002be8 <HAL_TIM_PWM_Start+0x150>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d00e      	beq.n	8002ba6 <HAL_TIM_PWM_Start+0x10e>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a17      	ldr	r2, [pc, #92]	@ (8002bec <HAL_TIM_PWM_Start+0x154>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d009      	beq.n	8002ba6 <HAL_TIM_PWM_Start+0x10e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a16      	ldr	r2, [pc, #88]	@ (8002bf0 <HAL_TIM_PWM_Start+0x158>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d004      	beq.n	8002ba6 <HAL_TIM_PWM_Start+0x10e>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a14      	ldr	r2, [pc, #80]	@ (8002bf4 <HAL_TIM_PWM_Start+0x15c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d111      	bne.n	8002bca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2b06      	cmp	r3, #6
 8002bb6:	d010      	beq.n	8002bda <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc8:	e007      	b.n	8002bda <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f042 0201 	orr.w	r2, r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40010000 	.word	0x40010000
 8002be8:	40000400 	.word	0x40000400
 8002bec:	40000800 	.word	0x40000800
 8002bf0:	40000c00 	.word	0x40000c00
 8002bf4:	40014000 	.word	0x40014000

08002bf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e0ae      	b.n	8002d74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b0c      	cmp	r3, #12
 8002c22:	f200 809f 	bhi.w	8002d64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002c26:	a201      	add	r2, pc, #4	@ (adr r2, 8002c2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2c:	08002c61 	.word	0x08002c61
 8002c30:	08002d65 	.word	0x08002d65
 8002c34:	08002d65 	.word	0x08002d65
 8002c38:	08002d65 	.word	0x08002d65
 8002c3c:	08002ca1 	.word	0x08002ca1
 8002c40:	08002d65 	.word	0x08002d65
 8002c44:	08002d65 	.word	0x08002d65
 8002c48:	08002d65 	.word	0x08002d65
 8002c4c:	08002ce3 	.word	0x08002ce3
 8002c50:	08002d65 	.word	0x08002d65
 8002c54:	08002d65 	.word	0x08002d65
 8002c58:	08002d65 	.word	0x08002d65
 8002c5c:	08002d23 	.word	0x08002d23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68b9      	ldr	r1, [r7, #8]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 f9dc 	bl	8003024 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699a      	ldr	r2, [r3, #24]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0208 	orr.w	r2, r2, #8
 8002c7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699a      	ldr	r2, [r3, #24]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0204 	bic.w	r2, r2, #4
 8002c8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6999      	ldr	r1, [r3, #24]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	691a      	ldr	r2, [r3, #16]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	619a      	str	r2, [r3, #24]
      break;
 8002c9e:	e064      	b.n	8002d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 fa22 	bl	80030f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699a      	ldr	r2, [r3, #24]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699a      	ldr	r2, [r3, #24]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6999      	ldr	r1, [r3, #24]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	021a      	lsls	r2, r3, #8
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	619a      	str	r2, [r3, #24]
      break;
 8002ce0:	e043      	b.n	8002d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68b9      	ldr	r1, [r7, #8]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 fa6d 	bl	80031c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	69da      	ldr	r2, [r3, #28]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f042 0208 	orr.w	r2, r2, #8
 8002cfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	69da      	ldr	r2, [r3, #28]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0204 	bic.w	r2, r2, #4
 8002d0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	69d9      	ldr	r1, [r3, #28]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	61da      	str	r2, [r3, #28]
      break;
 8002d20:	e023      	b.n	8002d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68b9      	ldr	r1, [r7, #8]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 fab7 	bl	800329c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	69da      	ldr	r2, [r3, #28]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	69da      	ldr	r2, [r3, #28]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	69d9      	ldr	r1, [r3, #28]
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	021a      	lsls	r2, r3, #8
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	61da      	str	r2, [r3, #28]
      break;
 8002d62:	e002      	b.n	8002d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	75fb      	strb	r3, [r7, #23]
      break;
 8002d68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_TIM_ConfigClockSource+0x1c>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e0b4      	b.n	8002f02 <HAL_TIM_ConfigClockSource+0x186>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002db6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002dbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dd0:	d03e      	beq.n	8002e50 <HAL_TIM_ConfigClockSource+0xd4>
 8002dd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dd6:	f200 8087 	bhi.w	8002ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8002dda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dde:	f000 8086 	beq.w	8002eee <HAL_TIM_ConfigClockSource+0x172>
 8002de2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002de6:	d87f      	bhi.n	8002ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8002de8:	2b70      	cmp	r3, #112	@ 0x70
 8002dea:	d01a      	beq.n	8002e22 <HAL_TIM_ConfigClockSource+0xa6>
 8002dec:	2b70      	cmp	r3, #112	@ 0x70
 8002dee:	d87b      	bhi.n	8002ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8002df0:	2b60      	cmp	r3, #96	@ 0x60
 8002df2:	d050      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0x11a>
 8002df4:	2b60      	cmp	r3, #96	@ 0x60
 8002df6:	d877      	bhi.n	8002ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8002df8:	2b50      	cmp	r3, #80	@ 0x50
 8002dfa:	d03c      	beq.n	8002e76 <HAL_TIM_ConfigClockSource+0xfa>
 8002dfc:	2b50      	cmp	r3, #80	@ 0x50
 8002dfe:	d873      	bhi.n	8002ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8002e00:	2b40      	cmp	r3, #64	@ 0x40
 8002e02:	d058      	beq.n	8002eb6 <HAL_TIM_ConfigClockSource+0x13a>
 8002e04:	2b40      	cmp	r3, #64	@ 0x40
 8002e06:	d86f      	bhi.n	8002ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8002e08:	2b30      	cmp	r3, #48	@ 0x30
 8002e0a:	d064      	beq.n	8002ed6 <HAL_TIM_ConfigClockSource+0x15a>
 8002e0c:	2b30      	cmp	r3, #48	@ 0x30
 8002e0e:	d86b      	bhi.n	8002ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8002e10:	2b20      	cmp	r3, #32
 8002e12:	d060      	beq.n	8002ed6 <HAL_TIM_ConfigClockSource+0x15a>
 8002e14:	2b20      	cmp	r3, #32
 8002e16:	d867      	bhi.n	8002ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d05c      	beq.n	8002ed6 <HAL_TIM_ConfigClockSource+0x15a>
 8002e1c:	2b10      	cmp	r3, #16
 8002e1e:	d05a      	beq.n	8002ed6 <HAL_TIM_ConfigClockSource+0x15a>
 8002e20:	e062      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e32:	f000 fafd 	bl	8003430 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002e44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	609a      	str	r2, [r3, #8]
      break;
 8002e4e:	e04f      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e60:	f000 fae6 	bl	8003430 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e72:	609a      	str	r2, [r3, #8]
      break;
 8002e74:	e03c      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e82:	461a      	mov	r2, r3
 8002e84:	f000 fa5a 	bl	800333c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2150      	movs	r1, #80	@ 0x50
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 fab3 	bl	80033fa <TIM_ITRx_SetConfig>
      break;
 8002e94:	e02c      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	f000 fa79 	bl	800339a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2160      	movs	r1, #96	@ 0x60
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 faa3 	bl	80033fa <TIM_ITRx_SetConfig>
      break;
 8002eb4:	e01c      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	f000 fa3a 	bl	800333c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2140      	movs	r1, #64	@ 0x40
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fa93 	bl	80033fa <TIM_ITRx_SetConfig>
      break;
 8002ed4:	e00c      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	f000 fa8a 	bl	80033fa <TIM_ITRx_SetConfig>
      break;
 8002ee6:	e003      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
      break;
 8002eec:	e000      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002eee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a3a      	ldr	r2, [pc, #232]	@ (8003008 <TIM_Base_SetConfig+0xfc>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d00f      	beq.n	8002f44 <TIM_Base_SetConfig+0x38>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f2a:	d00b      	beq.n	8002f44 <TIM_Base_SetConfig+0x38>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a37      	ldr	r2, [pc, #220]	@ (800300c <TIM_Base_SetConfig+0x100>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d007      	beq.n	8002f44 <TIM_Base_SetConfig+0x38>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a36      	ldr	r2, [pc, #216]	@ (8003010 <TIM_Base_SetConfig+0x104>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d003      	beq.n	8002f44 <TIM_Base_SetConfig+0x38>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a35      	ldr	r2, [pc, #212]	@ (8003014 <TIM_Base_SetConfig+0x108>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d108      	bne.n	8002f56 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a2b      	ldr	r2, [pc, #172]	@ (8003008 <TIM_Base_SetConfig+0xfc>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d01b      	beq.n	8002f96 <TIM_Base_SetConfig+0x8a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f64:	d017      	beq.n	8002f96 <TIM_Base_SetConfig+0x8a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a28      	ldr	r2, [pc, #160]	@ (800300c <TIM_Base_SetConfig+0x100>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d013      	beq.n	8002f96 <TIM_Base_SetConfig+0x8a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a27      	ldr	r2, [pc, #156]	@ (8003010 <TIM_Base_SetConfig+0x104>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00f      	beq.n	8002f96 <TIM_Base_SetConfig+0x8a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a26      	ldr	r2, [pc, #152]	@ (8003014 <TIM_Base_SetConfig+0x108>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00b      	beq.n	8002f96 <TIM_Base_SetConfig+0x8a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a25      	ldr	r2, [pc, #148]	@ (8003018 <TIM_Base_SetConfig+0x10c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d007      	beq.n	8002f96 <TIM_Base_SetConfig+0x8a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a24      	ldr	r2, [pc, #144]	@ (800301c <TIM_Base_SetConfig+0x110>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d003      	beq.n	8002f96 <TIM_Base_SetConfig+0x8a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a23      	ldr	r2, [pc, #140]	@ (8003020 <TIM_Base_SetConfig+0x114>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d108      	bne.n	8002fa8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a0e      	ldr	r2, [pc, #56]	@ (8003008 <TIM_Base_SetConfig+0xfc>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d103      	bne.n	8002fdc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d105      	bne.n	8002ffa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f023 0201 	bic.w	r2, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	611a      	str	r2, [r3, #16]
  }
}
 8002ffa:	bf00      	nop
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	40010000 	.word	0x40010000
 800300c:	40000400 	.word	0x40000400
 8003010:	40000800 	.word	0x40000800
 8003014:	40000c00 	.word	0x40000c00
 8003018:	40014000 	.word	0x40014000
 800301c:	40014400 	.word	0x40014400
 8003020:	40014800 	.word	0x40014800

08003024 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003024:	b480      	push	{r7}
 8003026:	b087      	sub	sp, #28
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	f023 0201 	bic.w	r2, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f023 0303 	bic.w	r3, r3, #3
 800305a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f023 0302 	bic.w	r3, r3, #2
 800306c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4313      	orrs	r3, r2
 8003076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a1c      	ldr	r2, [pc, #112]	@ (80030ec <TIM_OC1_SetConfig+0xc8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d10c      	bne.n	800309a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f023 0308 	bic.w	r3, r3, #8
 8003086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	4313      	orrs	r3, r2
 8003090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f023 0304 	bic.w	r3, r3, #4
 8003098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a13      	ldr	r2, [pc, #76]	@ (80030ec <TIM_OC1_SetConfig+0xc8>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d111      	bne.n	80030c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80030b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	621a      	str	r2, [r3, #32]
}
 80030e0:	bf00      	nop
 80030e2:	371c      	adds	r7, #28
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	40010000 	.word	0x40010000

080030f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b087      	sub	sp, #28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	f023 0210 	bic.w	r2, r3, #16
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800311e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4313      	orrs	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f023 0320 	bic.w	r3, r3, #32
 800313a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4313      	orrs	r3, r2
 8003146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a1e      	ldr	r2, [pc, #120]	@ (80031c4 <TIM_OC2_SetConfig+0xd4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d10d      	bne.n	800316c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	4313      	orrs	r3, r2
 8003162:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800316a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a15      	ldr	r2, [pc, #84]	@ (80031c4 <TIM_OC2_SetConfig+0xd4>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d113      	bne.n	800319c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800317a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003182:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	621a      	str	r2, [r3, #32]
}
 80031b6:	bf00      	nop
 80031b8:	371c      	adds	r7, #28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40010000 	.word	0x40010000

080031c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f023 0303 	bic.w	r3, r3, #3
 80031fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	4313      	orrs	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	021b      	lsls	r3, r3, #8
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	4313      	orrs	r3, r2
 800321c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a1d      	ldr	r2, [pc, #116]	@ (8003298 <TIM_OC3_SetConfig+0xd0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d10d      	bne.n	8003242 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800322c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	021b      	lsls	r3, r3, #8
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	4313      	orrs	r3, r2
 8003238:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003240:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a14      	ldr	r2, [pc, #80]	@ (8003298 <TIM_OC3_SetConfig+0xd0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d113      	bne.n	8003272 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003250:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003258:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	621a      	str	r2, [r3, #32]
}
 800328c:	bf00      	nop
 800328e:	371c      	adds	r7, #28
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	40010000 	.word	0x40010000

0800329c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800329c:	b480      	push	{r7}
 800329e:	b087      	sub	sp, #28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	021b      	lsls	r3, r3, #8
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4313      	orrs	r3, r2
 80032de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80032e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	031b      	lsls	r3, r3, #12
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a10      	ldr	r2, [pc, #64]	@ (8003338 <TIM_OC4_SetConfig+0x9c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d109      	bne.n	8003310 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003302:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	019b      	lsls	r3, r3, #6
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	621a      	str	r2, [r3, #32]
}
 800332a:	bf00      	nop
 800332c:	371c      	adds	r7, #28
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40010000 	.word	0x40010000

0800333c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	f023 0201 	bic.w	r2, r3, #1
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f023 030a 	bic.w	r3, r3, #10
 8003378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4313      	orrs	r3, r2
 8003380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	621a      	str	r2, [r3, #32]
}
 800338e:	bf00      	nop
 8003390:	371c      	adds	r7, #28
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800339a:	b480      	push	{r7}
 800339c:	b087      	sub	sp, #28
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	f023 0210 	bic.w	r2, r3, #16
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80033c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	031b      	lsls	r3, r3, #12
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80033d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	4313      	orrs	r3, r2
 80033e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	621a      	str	r2, [r3, #32]
}
 80033ee:	bf00      	nop
 80033f0:	371c      	adds	r7, #28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b085      	sub	sp, #20
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
 8003402:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003410:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	f043 0307 	orr.w	r3, r3, #7
 800341c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	609a      	str	r2, [r3, #8]
}
 8003424:	bf00      	nop
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800344a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	021a      	lsls	r2, r3, #8
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	431a      	orrs	r2, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	4313      	orrs	r3, r2
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	4313      	orrs	r3, r2
 800345c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	609a      	str	r2, [r3, #8]
}
 8003464:	bf00      	nop
 8003466:	371c      	adds	r7, #28
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f003 031f 	and.w	r3, r3, #31
 8003482:	2201      	movs	r2, #1
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6a1a      	ldr	r2, [r3, #32]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	43db      	mvns	r3, r3
 8003492:	401a      	ands	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a1a      	ldr	r2, [r3, #32]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f003 031f 	and.w	r3, r3, #31
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	fa01 f303 	lsl.w	r3, r1, r3
 80034a8:	431a      	orrs	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	621a      	str	r2, [r3, #32]
}
 80034ae:	bf00      	nop
 80034b0:	371c      	adds	r7, #28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
	...

080034bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e050      	b.n	8003576 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	4313      	orrs	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a1c      	ldr	r2, [pc, #112]	@ (8003584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d018      	beq.n	800354a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003520:	d013      	beq.n	800354a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a18      	ldr	r2, [pc, #96]	@ (8003588 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d00e      	beq.n	800354a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a16      	ldr	r2, [pc, #88]	@ (800358c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d009      	beq.n	800354a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a15      	ldr	r2, [pc, #84]	@ (8003590 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d004      	beq.n	800354a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a13      	ldr	r2, [pc, #76]	@ (8003594 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d10c      	bne.n	8003564 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003550:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	4313      	orrs	r3, r2
 800355a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40010000 	.word	0x40010000
 8003588:	40000400 	.word	0x40000400
 800358c:	40000800 	.word	0x40000800
 8003590:	40000c00 	.word	0x40000c00
 8003594:	40014000 	.word	0x40014000

08003598 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e03d      	b.n	8003630 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	4313      	orrs	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	4313      	orrs	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e042      	b.n	80036d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d106      	bne.n	8003668 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7fd fd9c 	bl	80011a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2224      	movs	r2, #36	@ 0x24
 800366c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800367e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f973 	bl	800396c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003694:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695a      	ldr	r2, [r3, #20]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08a      	sub	sp, #40	@ 0x28
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	4613      	mov	r3, r2
 80036ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b20      	cmp	r3, #32
 80036fa:	d175      	bne.n	80037e8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <HAL_UART_Transmit+0x2c>
 8003702:	88fb      	ldrh	r3, [r7, #6]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e06e      	b.n	80037ea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2221      	movs	r2, #33	@ 0x21
 8003716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800371a:	f7fd fe9b 	bl	8001454 <HAL_GetTick>
 800371e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	88fa      	ldrh	r2, [r7, #6]
 8003724:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	88fa      	ldrh	r2, [r7, #6]
 800372a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003734:	d108      	bne.n	8003748 <HAL_UART_Transmit+0x6c>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d104      	bne.n	8003748 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	61bb      	str	r3, [r7, #24]
 8003746:	e003      	b.n	8003750 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800374c:	2300      	movs	r3, #0
 800374e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003750:	e02e      	b.n	80037b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2200      	movs	r2, #0
 800375a:	2180      	movs	r1, #128	@ 0x80
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 f848 	bl	80037f2 <UART_WaitOnFlagUntilTimeout>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2220      	movs	r2, #32
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e03a      	b.n	80037ea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10b      	bne.n	8003792 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003788:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	3302      	adds	r3, #2
 800378e:	61bb      	str	r3, [r7, #24]
 8003790:	e007      	b.n	80037a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	781a      	ldrb	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	3301      	adds	r3, #1
 80037a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1cb      	bne.n	8003752 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2200      	movs	r2, #0
 80037c2:	2140      	movs	r1, #64	@ 0x40
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 f814 	bl	80037f2 <UART_WaitOnFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e006      	b.n	80037ea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	e000      	b.n	80037ea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80037e8:	2302      	movs	r3, #2
  }
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3720      	adds	r7, #32
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b086      	sub	sp, #24
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	603b      	str	r3, [r7, #0]
 80037fe:	4613      	mov	r3, r2
 8003800:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003802:	e03b      	b.n	800387c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380a:	d037      	beq.n	800387c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380c:	f7fd fe22 	bl	8001454 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	6a3a      	ldr	r2, [r7, #32]
 8003818:	429a      	cmp	r2, r3
 800381a:	d302      	bcc.n	8003822 <UART_WaitOnFlagUntilTimeout+0x30>
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e03a      	b.n	800389c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d023      	beq.n	800387c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b80      	cmp	r3, #128	@ 0x80
 8003838:	d020      	beq.n	800387c <UART_WaitOnFlagUntilTimeout+0x8a>
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b40      	cmp	r3, #64	@ 0x40
 800383e:	d01d      	beq.n	800387c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b08      	cmp	r3, #8
 800384c:	d116      	bne.n	800387c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 f81d 	bl	80038a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2208      	movs	r2, #8
 800386e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e00f      	b.n	800389c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	4013      	ands	r3, r2
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	429a      	cmp	r2, r3
 800388a:	bf0c      	ite	eq
 800388c:	2301      	moveq	r3, #1
 800388e:	2300      	movne	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	461a      	mov	r2, r3
 8003894:	79fb      	ldrb	r3, [r7, #7]
 8003896:	429a      	cmp	r2, r3
 8003898:	d0b4      	beq.n	8003804 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b095      	sub	sp, #84	@ 0x54
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	330c      	adds	r3, #12
 80038b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b6:	e853 3f00 	ldrex	r3, [r3]
 80038ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	330c      	adds	r3, #12
 80038ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038cc:	643a      	str	r2, [r7, #64]	@ 0x40
 80038ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038d4:	e841 2300 	strex	r3, r2, [r1]
 80038d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1e5      	bne.n	80038ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3314      	adds	r3, #20
 80038e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	e853 3f00 	ldrex	r3, [r3]
 80038ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f023 0301 	bic.w	r3, r3, #1
 80038f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3314      	adds	r3, #20
 80038fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003900:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003902:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003904:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003906:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003908:	e841 2300 	strex	r3, r2, [r1]
 800390c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800390e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1e5      	bne.n	80038e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003918:	2b01      	cmp	r3, #1
 800391a:	d119      	bne.n	8003950 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	330c      	adds	r3, #12
 8003922:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	e853 3f00 	ldrex	r3, [r3]
 800392a:	60bb      	str	r3, [r7, #8]
   return(result);
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f023 0310 	bic.w	r3, r3, #16
 8003932:	647b      	str	r3, [r7, #68]	@ 0x44
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	330c      	adds	r3, #12
 800393a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800393c:	61ba      	str	r2, [r7, #24]
 800393e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003940:	6979      	ldr	r1, [r7, #20]
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	e841 2300 	strex	r3, r2, [r1]
 8003948:	613b      	str	r3, [r7, #16]
   return(result);
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1e5      	bne.n	800391c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800395e:	bf00      	nop
 8003960:	3754      	adds	r7, #84	@ 0x54
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
	...

0800396c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800396c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003970:	b0c0      	sub	sp, #256	@ 0x100
 8003972:	af00      	add	r7, sp, #0
 8003974:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003988:	68d9      	ldr	r1, [r3, #12]
 800398a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	ea40 0301 	orr.w	r3, r0, r1
 8003994:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	431a      	orrs	r2, r3
 80039a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	431a      	orrs	r2, r3
 80039ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80039c4:	f021 010c 	bic.w	r1, r1, #12
 80039c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80039d2:	430b      	orrs	r3, r1
 80039d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80039e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e6:	6999      	ldr	r1, [r3, #24]
 80039e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	ea40 0301 	orr.w	r3, r0, r1
 80039f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	4b8f      	ldr	r3, [pc, #572]	@ (8003c38 <UART_SetConfig+0x2cc>)
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d005      	beq.n	8003a0c <UART_SetConfig+0xa0>
 8003a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	4b8d      	ldr	r3, [pc, #564]	@ (8003c3c <UART_SetConfig+0x2d0>)
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d104      	bne.n	8003a16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a0c:	f7fe ff88 	bl	8002920 <HAL_RCC_GetPCLK2Freq>
 8003a10:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a14:	e003      	b.n	8003a1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a16:	f7fe ff6f 	bl	80028f8 <HAL_RCC_GetPCLK1Freq>
 8003a1a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a28:	f040 810c 	bne.w	8003c44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a30:	2200      	movs	r2, #0
 8003a32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a36:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a3e:	4622      	mov	r2, r4
 8003a40:	462b      	mov	r3, r5
 8003a42:	1891      	adds	r1, r2, r2
 8003a44:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a46:	415b      	adcs	r3, r3
 8003a48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a4e:	4621      	mov	r1, r4
 8003a50:	eb12 0801 	adds.w	r8, r2, r1
 8003a54:	4629      	mov	r1, r5
 8003a56:	eb43 0901 	adc.w	r9, r3, r1
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	f04f 0300 	mov.w	r3, #0
 8003a62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a6e:	4690      	mov	r8, r2
 8003a70:	4699      	mov	r9, r3
 8003a72:	4623      	mov	r3, r4
 8003a74:	eb18 0303 	adds.w	r3, r8, r3
 8003a78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a7c:	462b      	mov	r3, r5
 8003a7e:	eb49 0303 	adc.w	r3, r9, r3
 8003a82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a92:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	18db      	adds	r3, r3, r3
 8003a9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	eb42 0303 	adc.w	r3, r2, r3
 8003aa6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003aa8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003aac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ab0:	f7fc fbee 	bl	8000290 <__aeabi_uldivmod>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4b61      	ldr	r3, [pc, #388]	@ (8003c40 <UART_SetConfig+0x2d4>)
 8003aba:	fba3 2302 	umull	r2, r3, r3, r2
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	011c      	lsls	r4, r3, #4
 8003ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003acc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ad0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ad4:	4642      	mov	r2, r8
 8003ad6:	464b      	mov	r3, r9
 8003ad8:	1891      	adds	r1, r2, r2
 8003ada:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003adc:	415b      	adcs	r3, r3
 8003ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ae0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ae4:	4641      	mov	r1, r8
 8003ae6:	eb12 0a01 	adds.w	sl, r2, r1
 8003aea:	4649      	mov	r1, r9
 8003aec:	eb43 0b01 	adc.w	fp, r3, r1
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003afc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b04:	4692      	mov	sl, r2
 8003b06:	469b      	mov	fp, r3
 8003b08:	4643      	mov	r3, r8
 8003b0a:	eb1a 0303 	adds.w	r3, sl, r3
 8003b0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b12:	464b      	mov	r3, r9
 8003b14:	eb4b 0303 	adc.w	r3, fp, r3
 8003b18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b28:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b30:	460b      	mov	r3, r1
 8003b32:	18db      	adds	r3, r3, r3
 8003b34:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b36:	4613      	mov	r3, r2
 8003b38:	eb42 0303 	adc.w	r3, r2, r3
 8003b3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b46:	f7fc fba3 	bl	8000290 <__aeabi_uldivmod>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4611      	mov	r1, r2
 8003b50:	4b3b      	ldr	r3, [pc, #236]	@ (8003c40 <UART_SetConfig+0x2d4>)
 8003b52:	fba3 2301 	umull	r2, r3, r3, r1
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	2264      	movs	r2, #100	@ 0x64
 8003b5a:	fb02 f303 	mul.w	r3, r2, r3
 8003b5e:	1acb      	subs	r3, r1, r3
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b66:	4b36      	ldr	r3, [pc, #216]	@ (8003c40 <UART_SetConfig+0x2d4>)
 8003b68:	fba3 2302 	umull	r2, r3, r3, r2
 8003b6c:	095b      	lsrs	r3, r3, #5
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b74:	441c      	add	r4, r3
 8003b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b80:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b88:	4642      	mov	r2, r8
 8003b8a:	464b      	mov	r3, r9
 8003b8c:	1891      	adds	r1, r2, r2
 8003b8e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b90:	415b      	adcs	r3, r3
 8003b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b98:	4641      	mov	r1, r8
 8003b9a:	1851      	adds	r1, r2, r1
 8003b9c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b9e:	4649      	mov	r1, r9
 8003ba0:	414b      	adcs	r3, r1
 8003ba2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003bb0:	4659      	mov	r1, fp
 8003bb2:	00cb      	lsls	r3, r1, #3
 8003bb4:	4651      	mov	r1, sl
 8003bb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bba:	4651      	mov	r1, sl
 8003bbc:	00ca      	lsls	r2, r1, #3
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	4642      	mov	r2, r8
 8003bc6:	189b      	adds	r3, r3, r2
 8003bc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bcc:	464b      	mov	r3, r9
 8003bce:	460a      	mov	r2, r1
 8003bd0:	eb42 0303 	adc.w	r3, r2, r3
 8003bd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003be4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003be8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003bec:	460b      	mov	r3, r1
 8003bee:	18db      	adds	r3, r3, r3
 8003bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	eb42 0303 	adc.w	r3, r2, r3
 8003bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bfe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c02:	f7fc fb45 	bl	8000290 <__aeabi_uldivmod>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c40 <UART_SetConfig+0x2d4>)
 8003c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c10:	095b      	lsrs	r3, r3, #5
 8003c12:	2164      	movs	r1, #100	@ 0x64
 8003c14:	fb01 f303 	mul.w	r3, r1, r3
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	3332      	adds	r3, #50	@ 0x32
 8003c1e:	4a08      	ldr	r2, [pc, #32]	@ (8003c40 <UART_SetConfig+0x2d4>)
 8003c20:	fba2 2303 	umull	r2, r3, r2, r3
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	f003 0207 	and.w	r2, r3, #7
 8003c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4422      	add	r2, r4
 8003c32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c34:	e106      	b.n	8003e44 <UART_SetConfig+0x4d8>
 8003c36:	bf00      	nop
 8003c38:	40011000 	.word	0x40011000
 8003c3c:	40011400 	.word	0x40011400
 8003c40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c4e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c56:	4642      	mov	r2, r8
 8003c58:	464b      	mov	r3, r9
 8003c5a:	1891      	adds	r1, r2, r2
 8003c5c:	6239      	str	r1, [r7, #32]
 8003c5e:	415b      	adcs	r3, r3
 8003c60:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c66:	4641      	mov	r1, r8
 8003c68:	1854      	adds	r4, r2, r1
 8003c6a:	4649      	mov	r1, r9
 8003c6c:	eb43 0501 	adc.w	r5, r3, r1
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	00eb      	lsls	r3, r5, #3
 8003c7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c7e:	00e2      	lsls	r2, r4, #3
 8003c80:	4614      	mov	r4, r2
 8003c82:	461d      	mov	r5, r3
 8003c84:	4643      	mov	r3, r8
 8003c86:	18e3      	adds	r3, r4, r3
 8003c88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c8c:	464b      	mov	r3, r9
 8003c8e:	eb45 0303 	adc.w	r3, r5, r3
 8003c92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ca2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003cb2:	4629      	mov	r1, r5
 8003cb4:	008b      	lsls	r3, r1, #2
 8003cb6:	4621      	mov	r1, r4
 8003cb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	008a      	lsls	r2, r1, #2
 8003cc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003cc4:	f7fc fae4 	bl	8000290 <__aeabi_uldivmod>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4b60      	ldr	r3, [pc, #384]	@ (8003e50 <UART_SetConfig+0x4e4>)
 8003cce:	fba3 2302 	umull	r2, r3, r3, r2
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	011c      	lsls	r4, r3, #4
 8003cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ce0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ce4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ce8:	4642      	mov	r2, r8
 8003cea:	464b      	mov	r3, r9
 8003cec:	1891      	adds	r1, r2, r2
 8003cee:	61b9      	str	r1, [r7, #24]
 8003cf0:	415b      	adcs	r3, r3
 8003cf2:	61fb      	str	r3, [r7, #28]
 8003cf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cf8:	4641      	mov	r1, r8
 8003cfa:	1851      	adds	r1, r2, r1
 8003cfc:	6139      	str	r1, [r7, #16]
 8003cfe:	4649      	mov	r1, r9
 8003d00:	414b      	adcs	r3, r1
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d10:	4659      	mov	r1, fp
 8003d12:	00cb      	lsls	r3, r1, #3
 8003d14:	4651      	mov	r1, sl
 8003d16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d1a:	4651      	mov	r1, sl
 8003d1c:	00ca      	lsls	r2, r1, #3
 8003d1e:	4610      	mov	r0, r2
 8003d20:	4619      	mov	r1, r3
 8003d22:	4603      	mov	r3, r0
 8003d24:	4642      	mov	r2, r8
 8003d26:	189b      	adds	r3, r3, r2
 8003d28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d2c:	464b      	mov	r3, r9
 8003d2e:	460a      	mov	r2, r1
 8003d30:	eb42 0303 	adc.w	r3, r2, r3
 8003d34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d42:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d50:	4649      	mov	r1, r9
 8003d52:	008b      	lsls	r3, r1, #2
 8003d54:	4641      	mov	r1, r8
 8003d56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d5a:	4641      	mov	r1, r8
 8003d5c:	008a      	lsls	r2, r1, #2
 8003d5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d62:	f7fc fa95 	bl	8000290 <__aeabi_uldivmod>
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	4b38      	ldr	r3, [pc, #224]	@ (8003e50 <UART_SetConfig+0x4e4>)
 8003d6e:	fba3 2301 	umull	r2, r3, r3, r1
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	2264      	movs	r2, #100	@ 0x64
 8003d76:	fb02 f303 	mul.w	r3, r2, r3
 8003d7a:	1acb      	subs	r3, r1, r3
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	3332      	adds	r3, #50	@ 0x32
 8003d80:	4a33      	ldr	r2, [pc, #204]	@ (8003e50 <UART_SetConfig+0x4e4>)
 8003d82:	fba2 2303 	umull	r2, r3, r2, r3
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d8c:	441c      	add	r4, r3
 8003d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d92:	2200      	movs	r2, #0
 8003d94:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d96:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d9c:	4642      	mov	r2, r8
 8003d9e:	464b      	mov	r3, r9
 8003da0:	1891      	adds	r1, r2, r2
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	415b      	adcs	r3, r3
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dac:	4641      	mov	r1, r8
 8003dae:	1851      	adds	r1, r2, r1
 8003db0:	6039      	str	r1, [r7, #0]
 8003db2:	4649      	mov	r1, r9
 8003db4:	414b      	adcs	r3, r1
 8003db6:	607b      	str	r3, [r7, #4]
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003dc4:	4659      	mov	r1, fp
 8003dc6:	00cb      	lsls	r3, r1, #3
 8003dc8:	4651      	mov	r1, sl
 8003dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dce:	4651      	mov	r1, sl
 8003dd0:	00ca      	lsls	r2, r1, #3
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	4642      	mov	r2, r8
 8003dda:	189b      	adds	r3, r3, r2
 8003ddc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dde:	464b      	mov	r3, r9
 8003de0:	460a      	mov	r2, r1
 8003de2:	eb42 0303 	adc.w	r3, r2, r3
 8003de6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003df2:	667a      	str	r2, [r7, #100]	@ 0x64
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	f04f 0300 	mov.w	r3, #0
 8003dfc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e00:	4649      	mov	r1, r9
 8003e02:	008b      	lsls	r3, r1, #2
 8003e04:	4641      	mov	r1, r8
 8003e06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e0a:	4641      	mov	r1, r8
 8003e0c:	008a      	lsls	r2, r1, #2
 8003e0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e12:	f7fc fa3d 	bl	8000290 <__aeabi_uldivmod>
 8003e16:	4602      	mov	r2, r0
 8003e18:	460b      	mov	r3, r1
 8003e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e50 <UART_SetConfig+0x4e4>)
 8003e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e20:	095b      	lsrs	r3, r3, #5
 8003e22:	2164      	movs	r1, #100	@ 0x64
 8003e24:	fb01 f303 	mul.w	r3, r1, r3
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	3332      	adds	r3, #50	@ 0x32
 8003e2e:	4a08      	ldr	r2, [pc, #32]	@ (8003e50 <UART_SetConfig+0x4e4>)
 8003e30:	fba2 2303 	umull	r2, r3, r2, r3
 8003e34:	095b      	lsrs	r3, r3, #5
 8003e36:	f003 020f 	and.w	r2, r3, #15
 8003e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4422      	add	r2, r4
 8003e42:	609a      	str	r2, [r3, #8]
}
 8003e44:	bf00      	nop
 8003e46:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e50:	51eb851f 	.word	0x51eb851f

08003e54 <siprintf>:
 8003e54:	b40e      	push	{r1, r2, r3}
 8003e56:	b500      	push	{lr}
 8003e58:	b09c      	sub	sp, #112	@ 0x70
 8003e5a:	ab1d      	add	r3, sp, #116	@ 0x74
 8003e5c:	9002      	str	r0, [sp, #8]
 8003e5e:	9006      	str	r0, [sp, #24]
 8003e60:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003e64:	4809      	ldr	r0, [pc, #36]	@ (8003e8c <siprintf+0x38>)
 8003e66:	9107      	str	r1, [sp, #28]
 8003e68:	9104      	str	r1, [sp, #16]
 8003e6a:	4909      	ldr	r1, [pc, #36]	@ (8003e90 <siprintf+0x3c>)
 8003e6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e70:	9105      	str	r1, [sp, #20]
 8003e72:	6800      	ldr	r0, [r0, #0]
 8003e74:	9301      	str	r3, [sp, #4]
 8003e76:	a902      	add	r1, sp, #8
 8003e78:	f000 f994 	bl	80041a4 <_svfiprintf_r>
 8003e7c:	9b02      	ldr	r3, [sp, #8]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	701a      	strb	r2, [r3, #0]
 8003e82:	b01c      	add	sp, #112	@ 0x70
 8003e84:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e88:	b003      	add	sp, #12
 8003e8a:	4770      	bx	lr
 8003e8c:	20000010 	.word	0x20000010
 8003e90:	ffff0208 	.word	0xffff0208

08003e94 <memset>:
 8003e94:	4402      	add	r2, r0
 8003e96:	4603      	mov	r3, r0
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d100      	bne.n	8003e9e <memset+0xa>
 8003e9c:	4770      	bx	lr
 8003e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003ea2:	e7f9      	b.n	8003e98 <memset+0x4>

08003ea4 <__errno>:
 8003ea4:	4b01      	ldr	r3, [pc, #4]	@ (8003eac <__errno+0x8>)
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	20000010 	.word	0x20000010

08003eb0 <__libc_init_array>:
 8003eb0:	b570      	push	{r4, r5, r6, lr}
 8003eb2:	4d0d      	ldr	r5, [pc, #52]	@ (8003ee8 <__libc_init_array+0x38>)
 8003eb4:	4c0d      	ldr	r4, [pc, #52]	@ (8003eec <__libc_init_array+0x3c>)
 8003eb6:	1b64      	subs	r4, r4, r5
 8003eb8:	10a4      	asrs	r4, r4, #2
 8003eba:	2600      	movs	r6, #0
 8003ebc:	42a6      	cmp	r6, r4
 8003ebe:	d109      	bne.n	8003ed4 <__libc_init_array+0x24>
 8003ec0:	4d0b      	ldr	r5, [pc, #44]	@ (8003ef0 <__libc_init_array+0x40>)
 8003ec2:	4c0c      	ldr	r4, [pc, #48]	@ (8003ef4 <__libc_init_array+0x44>)
 8003ec4:	f000 fc66 	bl	8004794 <_init>
 8003ec8:	1b64      	subs	r4, r4, r5
 8003eca:	10a4      	asrs	r4, r4, #2
 8003ecc:	2600      	movs	r6, #0
 8003ece:	42a6      	cmp	r6, r4
 8003ed0:	d105      	bne.n	8003ede <__libc_init_array+0x2e>
 8003ed2:	bd70      	pop	{r4, r5, r6, pc}
 8003ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ed8:	4798      	blx	r3
 8003eda:	3601      	adds	r6, #1
 8003edc:	e7ee      	b.n	8003ebc <__libc_init_array+0xc>
 8003ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee2:	4798      	blx	r3
 8003ee4:	3601      	adds	r6, #1
 8003ee6:	e7f2      	b.n	8003ece <__libc_init_array+0x1e>
 8003ee8:	0800493c 	.word	0x0800493c
 8003eec:	0800493c 	.word	0x0800493c
 8003ef0:	0800493c 	.word	0x0800493c
 8003ef4:	08004940 	.word	0x08004940

08003ef8 <__retarget_lock_acquire_recursive>:
 8003ef8:	4770      	bx	lr

08003efa <__retarget_lock_release_recursive>:
 8003efa:	4770      	bx	lr

08003efc <_free_r>:
 8003efc:	b538      	push	{r3, r4, r5, lr}
 8003efe:	4605      	mov	r5, r0
 8003f00:	2900      	cmp	r1, #0
 8003f02:	d041      	beq.n	8003f88 <_free_r+0x8c>
 8003f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f08:	1f0c      	subs	r4, r1, #4
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	bfb8      	it	lt
 8003f0e:	18e4      	addlt	r4, r4, r3
 8003f10:	f000 f8e0 	bl	80040d4 <__malloc_lock>
 8003f14:	4a1d      	ldr	r2, [pc, #116]	@ (8003f8c <_free_r+0x90>)
 8003f16:	6813      	ldr	r3, [r2, #0]
 8003f18:	b933      	cbnz	r3, 8003f28 <_free_r+0x2c>
 8003f1a:	6063      	str	r3, [r4, #4]
 8003f1c:	6014      	str	r4, [r2, #0]
 8003f1e:	4628      	mov	r0, r5
 8003f20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f24:	f000 b8dc 	b.w	80040e0 <__malloc_unlock>
 8003f28:	42a3      	cmp	r3, r4
 8003f2a:	d908      	bls.n	8003f3e <_free_r+0x42>
 8003f2c:	6820      	ldr	r0, [r4, #0]
 8003f2e:	1821      	adds	r1, r4, r0
 8003f30:	428b      	cmp	r3, r1
 8003f32:	bf01      	itttt	eq
 8003f34:	6819      	ldreq	r1, [r3, #0]
 8003f36:	685b      	ldreq	r3, [r3, #4]
 8003f38:	1809      	addeq	r1, r1, r0
 8003f3a:	6021      	streq	r1, [r4, #0]
 8003f3c:	e7ed      	b.n	8003f1a <_free_r+0x1e>
 8003f3e:	461a      	mov	r2, r3
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	b10b      	cbz	r3, 8003f48 <_free_r+0x4c>
 8003f44:	42a3      	cmp	r3, r4
 8003f46:	d9fa      	bls.n	8003f3e <_free_r+0x42>
 8003f48:	6811      	ldr	r1, [r2, #0]
 8003f4a:	1850      	adds	r0, r2, r1
 8003f4c:	42a0      	cmp	r0, r4
 8003f4e:	d10b      	bne.n	8003f68 <_free_r+0x6c>
 8003f50:	6820      	ldr	r0, [r4, #0]
 8003f52:	4401      	add	r1, r0
 8003f54:	1850      	adds	r0, r2, r1
 8003f56:	4283      	cmp	r3, r0
 8003f58:	6011      	str	r1, [r2, #0]
 8003f5a:	d1e0      	bne.n	8003f1e <_free_r+0x22>
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	6053      	str	r3, [r2, #4]
 8003f62:	4408      	add	r0, r1
 8003f64:	6010      	str	r0, [r2, #0]
 8003f66:	e7da      	b.n	8003f1e <_free_r+0x22>
 8003f68:	d902      	bls.n	8003f70 <_free_r+0x74>
 8003f6a:	230c      	movs	r3, #12
 8003f6c:	602b      	str	r3, [r5, #0]
 8003f6e:	e7d6      	b.n	8003f1e <_free_r+0x22>
 8003f70:	6820      	ldr	r0, [r4, #0]
 8003f72:	1821      	adds	r1, r4, r0
 8003f74:	428b      	cmp	r3, r1
 8003f76:	bf04      	itt	eq
 8003f78:	6819      	ldreq	r1, [r3, #0]
 8003f7a:	685b      	ldreq	r3, [r3, #4]
 8003f7c:	6063      	str	r3, [r4, #4]
 8003f7e:	bf04      	itt	eq
 8003f80:	1809      	addeq	r1, r1, r0
 8003f82:	6021      	streq	r1, [r4, #0]
 8003f84:	6054      	str	r4, [r2, #4]
 8003f86:	e7ca      	b.n	8003f1e <_free_r+0x22>
 8003f88:	bd38      	pop	{r3, r4, r5, pc}
 8003f8a:	bf00      	nop
 8003f8c:	200002f8 	.word	0x200002f8

08003f90 <sbrk_aligned>:
 8003f90:	b570      	push	{r4, r5, r6, lr}
 8003f92:	4e0f      	ldr	r6, [pc, #60]	@ (8003fd0 <sbrk_aligned+0x40>)
 8003f94:	460c      	mov	r4, r1
 8003f96:	6831      	ldr	r1, [r6, #0]
 8003f98:	4605      	mov	r5, r0
 8003f9a:	b911      	cbnz	r1, 8003fa2 <sbrk_aligned+0x12>
 8003f9c:	f000 fba6 	bl	80046ec <_sbrk_r>
 8003fa0:	6030      	str	r0, [r6, #0]
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	4628      	mov	r0, r5
 8003fa6:	f000 fba1 	bl	80046ec <_sbrk_r>
 8003faa:	1c43      	adds	r3, r0, #1
 8003fac:	d103      	bne.n	8003fb6 <sbrk_aligned+0x26>
 8003fae:	f04f 34ff 	mov.w	r4, #4294967295
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	bd70      	pop	{r4, r5, r6, pc}
 8003fb6:	1cc4      	adds	r4, r0, #3
 8003fb8:	f024 0403 	bic.w	r4, r4, #3
 8003fbc:	42a0      	cmp	r0, r4
 8003fbe:	d0f8      	beq.n	8003fb2 <sbrk_aligned+0x22>
 8003fc0:	1a21      	subs	r1, r4, r0
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	f000 fb92 	bl	80046ec <_sbrk_r>
 8003fc8:	3001      	adds	r0, #1
 8003fca:	d1f2      	bne.n	8003fb2 <sbrk_aligned+0x22>
 8003fcc:	e7ef      	b.n	8003fae <sbrk_aligned+0x1e>
 8003fce:	bf00      	nop
 8003fd0:	200002f4 	.word	0x200002f4

08003fd4 <_malloc_r>:
 8003fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fd8:	1ccd      	adds	r5, r1, #3
 8003fda:	f025 0503 	bic.w	r5, r5, #3
 8003fde:	3508      	adds	r5, #8
 8003fe0:	2d0c      	cmp	r5, #12
 8003fe2:	bf38      	it	cc
 8003fe4:	250c      	movcc	r5, #12
 8003fe6:	2d00      	cmp	r5, #0
 8003fe8:	4606      	mov	r6, r0
 8003fea:	db01      	blt.n	8003ff0 <_malloc_r+0x1c>
 8003fec:	42a9      	cmp	r1, r5
 8003fee:	d904      	bls.n	8003ffa <_malloc_r+0x26>
 8003ff0:	230c      	movs	r3, #12
 8003ff2:	6033      	str	r3, [r6, #0]
 8003ff4:	2000      	movs	r0, #0
 8003ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ffa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80040d0 <_malloc_r+0xfc>
 8003ffe:	f000 f869 	bl	80040d4 <__malloc_lock>
 8004002:	f8d8 3000 	ldr.w	r3, [r8]
 8004006:	461c      	mov	r4, r3
 8004008:	bb44      	cbnz	r4, 800405c <_malloc_r+0x88>
 800400a:	4629      	mov	r1, r5
 800400c:	4630      	mov	r0, r6
 800400e:	f7ff ffbf 	bl	8003f90 <sbrk_aligned>
 8004012:	1c43      	adds	r3, r0, #1
 8004014:	4604      	mov	r4, r0
 8004016:	d158      	bne.n	80040ca <_malloc_r+0xf6>
 8004018:	f8d8 4000 	ldr.w	r4, [r8]
 800401c:	4627      	mov	r7, r4
 800401e:	2f00      	cmp	r7, #0
 8004020:	d143      	bne.n	80040aa <_malloc_r+0xd6>
 8004022:	2c00      	cmp	r4, #0
 8004024:	d04b      	beq.n	80040be <_malloc_r+0xea>
 8004026:	6823      	ldr	r3, [r4, #0]
 8004028:	4639      	mov	r1, r7
 800402a:	4630      	mov	r0, r6
 800402c:	eb04 0903 	add.w	r9, r4, r3
 8004030:	f000 fb5c 	bl	80046ec <_sbrk_r>
 8004034:	4581      	cmp	r9, r0
 8004036:	d142      	bne.n	80040be <_malloc_r+0xea>
 8004038:	6821      	ldr	r1, [r4, #0]
 800403a:	1a6d      	subs	r5, r5, r1
 800403c:	4629      	mov	r1, r5
 800403e:	4630      	mov	r0, r6
 8004040:	f7ff ffa6 	bl	8003f90 <sbrk_aligned>
 8004044:	3001      	adds	r0, #1
 8004046:	d03a      	beq.n	80040be <_malloc_r+0xea>
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	442b      	add	r3, r5
 800404c:	6023      	str	r3, [r4, #0]
 800404e:	f8d8 3000 	ldr.w	r3, [r8]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	bb62      	cbnz	r2, 80040b0 <_malloc_r+0xdc>
 8004056:	f8c8 7000 	str.w	r7, [r8]
 800405a:	e00f      	b.n	800407c <_malloc_r+0xa8>
 800405c:	6822      	ldr	r2, [r4, #0]
 800405e:	1b52      	subs	r2, r2, r5
 8004060:	d420      	bmi.n	80040a4 <_malloc_r+0xd0>
 8004062:	2a0b      	cmp	r2, #11
 8004064:	d917      	bls.n	8004096 <_malloc_r+0xc2>
 8004066:	1961      	adds	r1, r4, r5
 8004068:	42a3      	cmp	r3, r4
 800406a:	6025      	str	r5, [r4, #0]
 800406c:	bf18      	it	ne
 800406e:	6059      	strne	r1, [r3, #4]
 8004070:	6863      	ldr	r3, [r4, #4]
 8004072:	bf08      	it	eq
 8004074:	f8c8 1000 	streq.w	r1, [r8]
 8004078:	5162      	str	r2, [r4, r5]
 800407a:	604b      	str	r3, [r1, #4]
 800407c:	4630      	mov	r0, r6
 800407e:	f000 f82f 	bl	80040e0 <__malloc_unlock>
 8004082:	f104 000b 	add.w	r0, r4, #11
 8004086:	1d23      	adds	r3, r4, #4
 8004088:	f020 0007 	bic.w	r0, r0, #7
 800408c:	1ac2      	subs	r2, r0, r3
 800408e:	bf1c      	itt	ne
 8004090:	1a1b      	subne	r3, r3, r0
 8004092:	50a3      	strne	r3, [r4, r2]
 8004094:	e7af      	b.n	8003ff6 <_malloc_r+0x22>
 8004096:	6862      	ldr	r2, [r4, #4]
 8004098:	42a3      	cmp	r3, r4
 800409a:	bf0c      	ite	eq
 800409c:	f8c8 2000 	streq.w	r2, [r8]
 80040a0:	605a      	strne	r2, [r3, #4]
 80040a2:	e7eb      	b.n	800407c <_malloc_r+0xa8>
 80040a4:	4623      	mov	r3, r4
 80040a6:	6864      	ldr	r4, [r4, #4]
 80040a8:	e7ae      	b.n	8004008 <_malloc_r+0x34>
 80040aa:	463c      	mov	r4, r7
 80040ac:	687f      	ldr	r7, [r7, #4]
 80040ae:	e7b6      	b.n	800401e <_malloc_r+0x4a>
 80040b0:	461a      	mov	r2, r3
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	42a3      	cmp	r3, r4
 80040b6:	d1fb      	bne.n	80040b0 <_malloc_r+0xdc>
 80040b8:	2300      	movs	r3, #0
 80040ba:	6053      	str	r3, [r2, #4]
 80040bc:	e7de      	b.n	800407c <_malloc_r+0xa8>
 80040be:	230c      	movs	r3, #12
 80040c0:	6033      	str	r3, [r6, #0]
 80040c2:	4630      	mov	r0, r6
 80040c4:	f000 f80c 	bl	80040e0 <__malloc_unlock>
 80040c8:	e794      	b.n	8003ff4 <_malloc_r+0x20>
 80040ca:	6005      	str	r5, [r0, #0]
 80040cc:	e7d6      	b.n	800407c <_malloc_r+0xa8>
 80040ce:	bf00      	nop
 80040d0:	200002f8 	.word	0x200002f8

080040d4 <__malloc_lock>:
 80040d4:	4801      	ldr	r0, [pc, #4]	@ (80040dc <__malloc_lock+0x8>)
 80040d6:	f7ff bf0f 	b.w	8003ef8 <__retarget_lock_acquire_recursive>
 80040da:	bf00      	nop
 80040dc:	200002f0 	.word	0x200002f0

080040e0 <__malloc_unlock>:
 80040e0:	4801      	ldr	r0, [pc, #4]	@ (80040e8 <__malloc_unlock+0x8>)
 80040e2:	f7ff bf0a 	b.w	8003efa <__retarget_lock_release_recursive>
 80040e6:	bf00      	nop
 80040e8:	200002f0 	.word	0x200002f0

080040ec <__ssputs_r>:
 80040ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040f0:	688e      	ldr	r6, [r1, #8]
 80040f2:	461f      	mov	r7, r3
 80040f4:	42be      	cmp	r6, r7
 80040f6:	680b      	ldr	r3, [r1, #0]
 80040f8:	4682      	mov	sl, r0
 80040fa:	460c      	mov	r4, r1
 80040fc:	4690      	mov	r8, r2
 80040fe:	d82d      	bhi.n	800415c <__ssputs_r+0x70>
 8004100:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004104:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004108:	d026      	beq.n	8004158 <__ssputs_r+0x6c>
 800410a:	6965      	ldr	r5, [r4, #20]
 800410c:	6909      	ldr	r1, [r1, #16]
 800410e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004112:	eba3 0901 	sub.w	r9, r3, r1
 8004116:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800411a:	1c7b      	adds	r3, r7, #1
 800411c:	444b      	add	r3, r9
 800411e:	106d      	asrs	r5, r5, #1
 8004120:	429d      	cmp	r5, r3
 8004122:	bf38      	it	cc
 8004124:	461d      	movcc	r5, r3
 8004126:	0553      	lsls	r3, r2, #21
 8004128:	d527      	bpl.n	800417a <__ssputs_r+0x8e>
 800412a:	4629      	mov	r1, r5
 800412c:	f7ff ff52 	bl	8003fd4 <_malloc_r>
 8004130:	4606      	mov	r6, r0
 8004132:	b360      	cbz	r0, 800418e <__ssputs_r+0xa2>
 8004134:	6921      	ldr	r1, [r4, #16]
 8004136:	464a      	mov	r2, r9
 8004138:	f000 fae8 	bl	800470c <memcpy>
 800413c:	89a3      	ldrh	r3, [r4, #12]
 800413e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004146:	81a3      	strh	r3, [r4, #12]
 8004148:	6126      	str	r6, [r4, #16]
 800414a:	6165      	str	r5, [r4, #20]
 800414c:	444e      	add	r6, r9
 800414e:	eba5 0509 	sub.w	r5, r5, r9
 8004152:	6026      	str	r6, [r4, #0]
 8004154:	60a5      	str	r5, [r4, #8]
 8004156:	463e      	mov	r6, r7
 8004158:	42be      	cmp	r6, r7
 800415a:	d900      	bls.n	800415e <__ssputs_r+0x72>
 800415c:	463e      	mov	r6, r7
 800415e:	6820      	ldr	r0, [r4, #0]
 8004160:	4632      	mov	r2, r6
 8004162:	4641      	mov	r1, r8
 8004164:	f000 faa8 	bl	80046b8 <memmove>
 8004168:	68a3      	ldr	r3, [r4, #8]
 800416a:	1b9b      	subs	r3, r3, r6
 800416c:	60a3      	str	r3, [r4, #8]
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	4433      	add	r3, r6
 8004172:	6023      	str	r3, [r4, #0]
 8004174:	2000      	movs	r0, #0
 8004176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800417a:	462a      	mov	r2, r5
 800417c:	f000 fad4 	bl	8004728 <_realloc_r>
 8004180:	4606      	mov	r6, r0
 8004182:	2800      	cmp	r0, #0
 8004184:	d1e0      	bne.n	8004148 <__ssputs_r+0x5c>
 8004186:	6921      	ldr	r1, [r4, #16]
 8004188:	4650      	mov	r0, sl
 800418a:	f7ff feb7 	bl	8003efc <_free_r>
 800418e:	230c      	movs	r3, #12
 8004190:	f8ca 3000 	str.w	r3, [sl]
 8004194:	89a3      	ldrh	r3, [r4, #12]
 8004196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800419a:	81a3      	strh	r3, [r4, #12]
 800419c:	f04f 30ff 	mov.w	r0, #4294967295
 80041a0:	e7e9      	b.n	8004176 <__ssputs_r+0x8a>
	...

080041a4 <_svfiprintf_r>:
 80041a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a8:	4698      	mov	r8, r3
 80041aa:	898b      	ldrh	r3, [r1, #12]
 80041ac:	061b      	lsls	r3, r3, #24
 80041ae:	b09d      	sub	sp, #116	@ 0x74
 80041b0:	4607      	mov	r7, r0
 80041b2:	460d      	mov	r5, r1
 80041b4:	4614      	mov	r4, r2
 80041b6:	d510      	bpl.n	80041da <_svfiprintf_r+0x36>
 80041b8:	690b      	ldr	r3, [r1, #16]
 80041ba:	b973      	cbnz	r3, 80041da <_svfiprintf_r+0x36>
 80041bc:	2140      	movs	r1, #64	@ 0x40
 80041be:	f7ff ff09 	bl	8003fd4 <_malloc_r>
 80041c2:	6028      	str	r0, [r5, #0]
 80041c4:	6128      	str	r0, [r5, #16]
 80041c6:	b930      	cbnz	r0, 80041d6 <_svfiprintf_r+0x32>
 80041c8:	230c      	movs	r3, #12
 80041ca:	603b      	str	r3, [r7, #0]
 80041cc:	f04f 30ff 	mov.w	r0, #4294967295
 80041d0:	b01d      	add	sp, #116	@ 0x74
 80041d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041d6:	2340      	movs	r3, #64	@ 0x40
 80041d8:	616b      	str	r3, [r5, #20]
 80041da:	2300      	movs	r3, #0
 80041dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80041de:	2320      	movs	r3, #32
 80041e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80041e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80041e8:	2330      	movs	r3, #48	@ 0x30
 80041ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004388 <_svfiprintf_r+0x1e4>
 80041ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80041f2:	f04f 0901 	mov.w	r9, #1
 80041f6:	4623      	mov	r3, r4
 80041f8:	469a      	mov	sl, r3
 80041fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041fe:	b10a      	cbz	r2, 8004204 <_svfiprintf_r+0x60>
 8004200:	2a25      	cmp	r2, #37	@ 0x25
 8004202:	d1f9      	bne.n	80041f8 <_svfiprintf_r+0x54>
 8004204:	ebba 0b04 	subs.w	fp, sl, r4
 8004208:	d00b      	beq.n	8004222 <_svfiprintf_r+0x7e>
 800420a:	465b      	mov	r3, fp
 800420c:	4622      	mov	r2, r4
 800420e:	4629      	mov	r1, r5
 8004210:	4638      	mov	r0, r7
 8004212:	f7ff ff6b 	bl	80040ec <__ssputs_r>
 8004216:	3001      	adds	r0, #1
 8004218:	f000 80a7 	beq.w	800436a <_svfiprintf_r+0x1c6>
 800421c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800421e:	445a      	add	r2, fp
 8004220:	9209      	str	r2, [sp, #36]	@ 0x24
 8004222:	f89a 3000 	ldrb.w	r3, [sl]
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 809f 	beq.w	800436a <_svfiprintf_r+0x1c6>
 800422c:	2300      	movs	r3, #0
 800422e:	f04f 32ff 	mov.w	r2, #4294967295
 8004232:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004236:	f10a 0a01 	add.w	sl, sl, #1
 800423a:	9304      	str	r3, [sp, #16]
 800423c:	9307      	str	r3, [sp, #28]
 800423e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004242:	931a      	str	r3, [sp, #104]	@ 0x68
 8004244:	4654      	mov	r4, sl
 8004246:	2205      	movs	r2, #5
 8004248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800424c:	484e      	ldr	r0, [pc, #312]	@ (8004388 <_svfiprintf_r+0x1e4>)
 800424e:	f7fb ffcf 	bl	80001f0 <memchr>
 8004252:	9a04      	ldr	r2, [sp, #16]
 8004254:	b9d8      	cbnz	r0, 800428e <_svfiprintf_r+0xea>
 8004256:	06d0      	lsls	r0, r2, #27
 8004258:	bf44      	itt	mi
 800425a:	2320      	movmi	r3, #32
 800425c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004260:	0711      	lsls	r1, r2, #28
 8004262:	bf44      	itt	mi
 8004264:	232b      	movmi	r3, #43	@ 0x2b
 8004266:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800426a:	f89a 3000 	ldrb.w	r3, [sl]
 800426e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004270:	d015      	beq.n	800429e <_svfiprintf_r+0xfa>
 8004272:	9a07      	ldr	r2, [sp, #28]
 8004274:	4654      	mov	r4, sl
 8004276:	2000      	movs	r0, #0
 8004278:	f04f 0c0a 	mov.w	ip, #10
 800427c:	4621      	mov	r1, r4
 800427e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004282:	3b30      	subs	r3, #48	@ 0x30
 8004284:	2b09      	cmp	r3, #9
 8004286:	d94b      	bls.n	8004320 <_svfiprintf_r+0x17c>
 8004288:	b1b0      	cbz	r0, 80042b8 <_svfiprintf_r+0x114>
 800428a:	9207      	str	r2, [sp, #28]
 800428c:	e014      	b.n	80042b8 <_svfiprintf_r+0x114>
 800428e:	eba0 0308 	sub.w	r3, r0, r8
 8004292:	fa09 f303 	lsl.w	r3, r9, r3
 8004296:	4313      	orrs	r3, r2
 8004298:	9304      	str	r3, [sp, #16]
 800429a:	46a2      	mov	sl, r4
 800429c:	e7d2      	b.n	8004244 <_svfiprintf_r+0xa0>
 800429e:	9b03      	ldr	r3, [sp, #12]
 80042a0:	1d19      	adds	r1, r3, #4
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	9103      	str	r1, [sp, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	bfbb      	ittet	lt
 80042aa:	425b      	neglt	r3, r3
 80042ac:	f042 0202 	orrlt.w	r2, r2, #2
 80042b0:	9307      	strge	r3, [sp, #28]
 80042b2:	9307      	strlt	r3, [sp, #28]
 80042b4:	bfb8      	it	lt
 80042b6:	9204      	strlt	r2, [sp, #16]
 80042b8:	7823      	ldrb	r3, [r4, #0]
 80042ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80042bc:	d10a      	bne.n	80042d4 <_svfiprintf_r+0x130>
 80042be:	7863      	ldrb	r3, [r4, #1]
 80042c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80042c2:	d132      	bne.n	800432a <_svfiprintf_r+0x186>
 80042c4:	9b03      	ldr	r3, [sp, #12]
 80042c6:	1d1a      	adds	r2, r3, #4
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	9203      	str	r2, [sp, #12]
 80042cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80042d0:	3402      	adds	r4, #2
 80042d2:	9305      	str	r3, [sp, #20]
 80042d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004398 <_svfiprintf_r+0x1f4>
 80042d8:	7821      	ldrb	r1, [r4, #0]
 80042da:	2203      	movs	r2, #3
 80042dc:	4650      	mov	r0, sl
 80042de:	f7fb ff87 	bl	80001f0 <memchr>
 80042e2:	b138      	cbz	r0, 80042f4 <_svfiprintf_r+0x150>
 80042e4:	9b04      	ldr	r3, [sp, #16]
 80042e6:	eba0 000a 	sub.w	r0, r0, sl
 80042ea:	2240      	movs	r2, #64	@ 0x40
 80042ec:	4082      	lsls	r2, r0
 80042ee:	4313      	orrs	r3, r2
 80042f0:	3401      	adds	r4, #1
 80042f2:	9304      	str	r3, [sp, #16]
 80042f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042f8:	4824      	ldr	r0, [pc, #144]	@ (800438c <_svfiprintf_r+0x1e8>)
 80042fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80042fe:	2206      	movs	r2, #6
 8004300:	f7fb ff76 	bl	80001f0 <memchr>
 8004304:	2800      	cmp	r0, #0
 8004306:	d036      	beq.n	8004376 <_svfiprintf_r+0x1d2>
 8004308:	4b21      	ldr	r3, [pc, #132]	@ (8004390 <_svfiprintf_r+0x1ec>)
 800430a:	bb1b      	cbnz	r3, 8004354 <_svfiprintf_r+0x1b0>
 800430c:	9b03      	ldr	r3, [sp, #12]
 800430e:	3307      	adds	r3, #7
 8004310:	f023 0307 	bic.w	r3, r3, #7
 8004314:	3308      	adds	r3, #8
 8004316:	9303      	str	r3, [sp, #12]
 8004318:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800431a:	4433      	add	r3, r6
 800431c:	9309      	str	r3, [sp, #36]	@ 0x24
 800431e:	e76a      	b.n	80041f6 <_svfiprintf_r+0x52>
 8004320:	fb0c 3202 	mla	r2, ip, r2, r3
 8004324:	460c      	mov	r4, r1
 8004326:	2001      	movs	r0, #1
 8004328:	e7a8      	b.n	800427c <_svfiprintf_r+0xd8>
 800432a:	2300      	movs	r3, #0
 800432c:	3401      	adds	r4, #1
 800432e:	9305      	str	r3, [sp, #20]
 8004330:	4619      	mov	r1, r3
 8004332:	f04f 0c0a 	mov.w	ip, #10
 8004336:	4620      	mov	r0, r4
 8004338:	f810 2b01 	ldrb.w	r2, [r0], #1
 800433c:	3a30      	subs	r2, #48	@ 0x30
 800433e:	2a09      	cmp	r2, #9
 8004340:	d903      	bls.n	800434a <_svfiprintf_r+0x1a6>
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0c6      	beq.n	80042d4 <_svfiprintf_r+0x130>
 8004346:	9105      	str	r1, [sp, #20]
 8004348:	e7c4      	b.n	80042d4 <_svfiprintf_r+0x130>
 800434a:	fb0c 2101 	mla	r1, ip, r1, r2
 800434e:	4604      	mov	r4, r0
 8004350:	2301      	movs	r3, #1
 8004352:	e7f0      	b.n	8004336 <_svfiprintf_r+0x192>
 8004354:	ab03      	add	r3, sp, #12
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	462a      	mov	r2, r5
 800435a:	4b0e      	ldr	r3, [pc, #56]	@ (8004394 <_svfiprintf_r+0x1f0>)
 800435c:	a904      	add	r1, sp, #16
 800435e:	4638      	mov	r0, r7
 8004360:	f3af 8000 	nop.w
 8004364:	1c42      	adds	r2, r0, #1
 8004366:	4606      	mov	r6, r0
 8004368:	d1d6      	bne.n	8004318 <_svfiprintf_r+0x174>
 800436a:	89ab      	ldrh	r3, [r5, #12]
 800436c:	065b      	lsls	r3, r3, #25
 800436e:	f53f af2d 	bmi.w	80041cc <_svfiprintf_r+0x28>
 8004372:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004374:	e72c      	b.n	80041d0 <_svfiprintf_r+0x2c>
 8004376:	ab03      	add	r3, sp, #12
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	462a      	mov	r2, r5
 800437c:	4b05      	ldr	r3, [pc, #20]	@ (8004394 <_svfiprintf_r+0x1f0>)
 800437e:	a904      	add	r1, sp, #16
 8004380:	4638      	mov	r0, r7
 8004382:	f000 f879 	bl	8004478 <_printf_i>
 8004386:	e7ed      	b.n	8004364 <_svfiprintf_r+0x1c0>
 8004388:	08004900 	.word	0x08004900
 800438c:	0800490a 	.word	0x0800490a
 8004390:	00000000 	.word	0x00000000
 8004394:	080040ed 	.word	0x080040ed
 8004398:	08004906 	.word	0x08004906

0800439c <_printf_common>:
 800439c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043a0:	4616      	mov	r6, r2
 80043a2:	4698      	mov	r8, r3
 80043a4:	688a      	ldr	r2, [r1, #8]
 80043a6:	690b      	ldr	r3, [r1, #16]
 80043a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043ac:	4293      	cmp	r3, r2
 80043ae:	bfb8      	it	lt
 80043b0:	4613      	movlt	r3, r2
 80043b2:	6033      	str	r3, [r6, #0]
 80043b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80043b8:	4607      	mov	r7, r0
 80043ba:	460c      	mov	r4, r1
 80043bc:	b10a      	cbz	r2, 80043c2 <_printf_common+0x26>
 80043be:	3301      	adds	r3, #1
 80043c0:	6033      	str	r3, [r6, #0]
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	0699      	lsls	r1, r3, #26
 80043c6:	bf42      	ittt	mi
 80043c8:	6833      	ldrmi	r3, [r6, #0]
 80043ca:	3302      	addmi	r3, #2
 80043cc:	6033      	strmi	r3, [r6, #0]
 80043ce:	6825      	ldr	r5, [r4, #0]
 80043d0:	f015 0506 	ands.w	r5, r5, #6
 80043d4:	d106      	bne.n	80043e4 <_printf_common+0x48>
 80043d6:	f104 0a19 	add.w	sl, r4, #25
 80043da:	68e3      	ldr	r3, [r4, #12]
 80043dc:	6832      	ldr	r2, [r6, #0]
 80043de:	1a9b      	subs	r3, r3, r2
 80043e0:	42ab      	cmp	r3, r5
 80043e2:	dc26      	bgt.n	8004432 <_printf_common+0x96>
 80043e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80043e8:	6822      	ldr	r2, [r4, #0]
 80043ea:	3b00      	subs	r3, #0
 80043ec:	bf18      	it	ne
 80043ee:	2301      	movne	r3, #1
 80043f0:	0692      	lsls	r2, r2, #26
 80043f2:	d42b      	bmi.n	800444c <_printf_common+0xb0>
 80043f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043f8:	4641      	mov	r1, r8
 80043fa:	4638      	mov	r0, r7
 80043fc:	47c8      	blx	r9
 80043fe:	3001      	adds	r0, #1
 8004400:	d01e      	beq.n	8004440 <_printf_common+0xa4>
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	6922      	ldr	r2, [r4, #16]
 8004406:	f003 0306 	and.w	r3, r3, #6
 800440a:	2b04      	cmp	r3, #4
 800440c:	bf02      	ittt	eq
 800440e:	68e5      	ldreq	r5, [r4, #12]
 8004410:	6833      	ldreq	r3, [r6, #0]
 8004412:	1aed      	subeq	r5, r5, r3
 8004414:	68a3      	ldr	r3, [r4, #8]
 8004416:	bf0c      	ite	eq
 8004418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800441c:	2500      	movne	r5, #0
 800441e:	4293      	cmp	r3, r2
 8004420:	bfc4      	itt	gt
 8004422:	1a9b      	subgt	r3, r3, r2
 8004424:	18ed      	addgt	r5, r5, r3
 8004426:	2600      	movs	r6, #0
 8004428:	341a      	adds	r4, #26
 800442a:	42b5      	cmp	r5, r6
 800442c:	d11a      	bne.n	8004464 <_printf_common+0xc8>
 800442e:	2000      	movs	r0, #0
 8004430:	e008      	b.n	8004444 <_printf_common+0xa8>
 8004432:	2301      	movs	r3, #1
 8004434:	4652      	mov	r2, sl
 8004436:	4641      	mov	r1, r8
 8004438:	4638      	mov	r0, r7
 800443a:	47c8      	blx	r9
 800443c:	3001      	adds	r0, #1
 800443e:	d103      	bne.n	8004448 <_printf_common+0xac>
 8004440:	f04f 30ff 	mov.w	r0, #4294967295
 8004444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004448:	3501      	adds	r5, #1
 800444a:	e7c6      	b.n	80043da <_printf_common+0x3e>
 800444c:	18e1      	adds	r1, r4, r3
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	2030      	movs	r0, #48	@ 0x30
 8004452:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004456:	4422      	add	r2, r4
 8004458:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800445c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004460:	3302      	adds	r3, #2
 8004462:	e7c7      	b.n	80043f4 <_printf_common+0x58>
 8004464:	2301      	movs	r3, #1
 8004466:	4622      	mov	r2, r4
 8004468:	4641      	mov	r1, r8
 800446a:	4638      	mov	r0, r7
 800446c:	47c8      	blx	r9
 800446e:	3001      	adds	r0, #1
 8004470:	d0e6      	beq.n	8004440 <_printf_common+0xa4>
 8004472:	3601      	adds	r6, #1
 8004474:	e7d9      	b.n	800442a <_printf_common+0x8e>
	...

08004478 <_printf_i>:
 8004478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800447c:	7e0f      	ldrb	r7, [r1, #24]
 800447e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004480:	2f78      	cmp	r7, #120	@ 0x78
 8004482:	4691      	mov	r9, r2
 8004484:	4680      	mov	r8, r0
 8004486:	460c      	mov	r4, r1
 8004488:	469a      	mov	sl, r3
 800448a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800448e:	d807      	bhi.n	80044a0 <_printf_i+0x28>
 8004490:	2f62      	cmp	r7, #98	@ 0x62
 8004492:	d80a      	bhi.n	80044aa <_printf_i+0x32>
 8004494:	2f00      	cmp	r7, #0
 8004496:	f000 80d2 	beq.w	800463e <_printf_i+0x1c6>
 800449a:	2f58      	cmp	r7, #88	@ 0x58
 800449c:	f000 80b9 	beq.w	8004612 <_printf_i+0x19a>
 80044a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044a8:	e03a      	b.n	8004520 <_printf_i+0xa8>
 80044aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044ae:	2b15      	cmp	r3, #21
 80044b0:	d8f6      	bhi.n	80044a0 <_printf_i+0x28>
 80044b2:	a101      	add	r1, pc, #4	@ (adr r1, 80044b8 <_printf_i+0x40>)
 80044b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044b8:	08004511 	.word	0x08004511
 80044bc:	08004525 	.word	0x08004525
 80044c0:	080044a1 	.word	0x080044a1
 80044c4:	080044a1 	.word	0x080044a1
 80044c8:	080044a1 	.word	0x080044a1
 80044cc:	080044a1 	.word	0x080044a1
 80044d0:	08004525 	.word	0x08004525
 80044d4:	080044a1 	.word	0x080044a1
 80044d8:	080044a1 	.word	0x080044a1
 80044dc:	080044a1 	.word	0x080044a1
 80044e0:	080044a1 	.word	0x080044a1
 80044e4:	08004625 	.word	0x08004625
 80044e8:	0800454f 	.word	0x0800454f
 80044ec:	080045df 	.word	0x080045df
 80044f0:	080044a1 	.word	0x080044a1
 80044f4:	080044a1 	.word	0x080044a1
 80044f8:	08004647 	.word	0x08004647
 80044fc:	080044a1 	.word	0x080044a1
 8004500:	0800454f 	.word	0x0800454f
 8004504:	080044a1 	.word	0x080044a1
 8004508:	080044a1 	.word	0x080044a1
 800450c:	080045e7 	.word	0x080045e7
 8004510:	6833      	ldr	r3, [r6, #0]
 8004512:	1d1a      	adds	r2, r3, #4
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6032      	str	r2, [r6, #0]
 8004518:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800451c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004520:	2301      	movs	r3, #1
 8004522:	e09d      	b.n	8004660 <_printf_i+0x1e8>
 8004524:	6833      	ldr	r3, [r6, #0]
 8004526:	6820      	ldr	r0, [r4, #0]
 8004528:	1d19      	adds	r1, r3, #4
 800452a:	6031      	str	r1, [r6, #0]
 800452c:	0606      	lsls	r6, r0, #24
 800452e:	d501      	bpl.n	8004534 <_printf_i+0xbc>
 8004530:	681d      	ldr	r5, [r3, #0]
 8004532:	e003      	b.n	800453c <_printf_i+0xc4>
 8004534:	0645      	lsls	r5, r0, #25
 8004536:	d5fb      	bpl.n	8004530 <_printf_i+0xb8>
 8004538:	f9b3 5000 	ldrsh.w	r5, [r3]
 800453c:	2d00      	cmp	r5, #0
 800453e:	da03      	bge.n	8004548 <_printf_i+0xd0>
 8004540:	232d      	movs	r3, #45	@ 0x2d
 8004542:	426d      	negs	r5, r5
 8004544:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004548:	4859      	ldr	r0, [pc, #356]	@ (80046b0 <_printf_i+0x238>)
 800454a:	230a      	movs	r3, #10
 800454c:	e011      	b.n	8004572 <_printf_i+0xfa>
 800454e:	6821      	ldr	r1, [r4, #0]
 8004550:	6833      	ldr	r3, [r6, #0]
 8004552:	0608      	lsls	r0, r1, #24
 8004554:	f853 5b04 	ldr.w	r5, [r3], #4
 8004558:	d402      	bmi.n	8004560 <_printf_i+0xe8>
 800455a:	0649      	lsls	r1, r1, #25
 800455c:	bf48      	it	mi
 800455e:	b2ad      	uxthmi	r5, r5
 8004560:	2f6f      	cmp	r7, #111	@ 0x6f
 8004562:	4853      	ldr	r0, [pc, #332]	@ (80046b0 <_printf_i+0x238>)
 8004564:	6033      	str	r3, [r6, #0]
 8004566:	bf14      	ite	ne
 8004568:	230a      	movne	r3, #10
 800456a:	2308      	moveq	r3, #8
 800456c:	2100      	movs	r1, #0
 800456e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004572:	6866      	ldr	r6, [r4, #4]
 8004574:	60a6      	str	r6, [r4, #8]
 8004576:	2e00      	cmp	r6, #0
 8004578:	bfa2      	ittt	ge
 800457a:	6821      	ldrge	r1, [r4, #0]
 800457c:	f021 0104 	bicge.w	r1, r1, #4
 8004580:	6021      	strge	r1, [r4, #0]
 8004582:	b90d      	cbnz	r5, 8004588 <_printf_i+0x110>
 8004584:	2e00      	cmp	r6, #0
 8004586:	d04b      	beq.n	8004620 <_printf_i+0x1a8>
 8004588:	4616      	mov	r6, r2
 800458a:	fbb5 f1f3 	udiv	r1, r5, r3
 800458e:	fb03 5711 	mls	r7, r3, r1, r5
 8004592:	5dc7      	ldrb	r7, [r0, r7]
 8004594:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004598:	462f      	mov	r7, r5
 800459a:	42bb      	cmp	r3, r7
 800459c:	460d      	mov	r5, r1
 800459e:	d9f4      	bls.n	800458a <_printf_i+0x112>
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d10b      	bne.n	80045bc <_printf_i+0x144>
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	07df      	lsls	r7, r3, #31
 80045a8:	d508      	bpl.n	80045bc <_printf_i+0x144>
 80045aa:	6923      	ldr	r3, [r4, #16]
 80045ac:	6861      	ldr	r1, [r4, #4]
 80045ae:	4299      	cmp	r1, r3
 80045b0:	bfde      	ittt	le
 80045b2:	2330      	movle	r3, #48	@ 0x30
 80045b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045bc:	1b92      	subs	r2, r2, r6
 80045be:	6122      	str	r2, [r4, #16]
 80045c0:	f8cd a000 	str.w	sl, [sp]
 80045c4:	464b      	mov	r3, r9
 80045c6:	aa03      	add	r2, sp, #12
 80045c8:	4621      	mov	r1, r4
 80045ca:	4640      	mov	r0, r8
 80045cc:	f7ff fee6 	bl	800439c <_printf_common>
 80045d0:	3001      	adds	r0, #1
 80045d2:	d14a      	bne.n	800466a <_printf_i+0x1f2>
 80045d4:	f04f 30ff 	mov.w	r0, #4294967295
 80045d8:	b004      	add	sp, #16
 80045da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	f043 0320 	orr.w	r3, r3, #32
 80045e4:	6023      	str	r3, [r4, #0]
 80045e6:	4833      	ldr	r0, [pc, #204]	@ (80046b4 <_printf_i+0x23c>)
 80045e8:	2778      	movs	r7, #120	@ 0x78
 80045ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045ee:	6823      	ldr	r3, [r4, #0]
 80045f0:	6831      	ldr	r1, [r6, #0]
 80045f2:	061f      	lsls	r7, r3, #24
 80045f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80045f8:	d402      	bmi.n	8004600 <_printf_i+0x188>
 80045fa:	065f      	lsls	r7, r3, #25
 80045fc:	bf48      	it	mi
 80045fe:	b2ad      	uxthmi	r5, r5
 8004600:	6031      	str	r1, [r6, #0]
 8004602:	07d9      	lsls	r1, r3, #31
 8004604:	bf44      	itt	mi
 8004606:	f043 0320 	orrmi.w	r3, r3, #32
 800460a:	6023      	strmi	r3, [r4, #0]
 800460c:	b11d      	cbz	r5, 8004616 <_printf_i+0x19e>
 800460e:	2310      	movs	r3, #16
 8004610:	e7ac      	b.n	800456c <_printf_i+0xf4>
 8004612:	4827      	ldr	r0, [pc, #156]	@ (80046b0 <_printf_i+0x238>)
 8004614:	e7e9      	b.n	80045ea <_printf_i+0x172>
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	f023 0320 	bic.w	r3, r3, #32
 800461c:	6023      	str	r3, [r4, #0]
 800461e:	e7f6      	b.n	800460e <_printf_i+0x196>
 8004620:	4616      	mov	r6, r2
 8004622:	e7bd      	b.n	80045a0 <_printf_i+0x128>
 8004624:	6833      	ldr	r3, [r6, #0]
 8004626:	6825      	ldr	r5, [r4, #0]
 8004628:	6961      	ldr	r1, [r4, #20]
 800462a:	1d18      	adds	r0, r3, #4
 800462c:	6030      	str	r0, [r6, #0]
 800462e:	062e      	lsls	r6, r5, #24
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	d501      	bpl.n	8004638 <_printf_i+0x1c0>
 8004634:	6019      	str	r1, [r3, #0]
 8004636:	e002      	b.n	800463e <_printf_i+0x1c6>
 8004638:	0668      	lsls	r0, r5, #25
 800463a:	d5fb      	bpl.n	8004634 <_printf_i+0x1bc>
 800463c:	8019      	strh	r1, [r3, #0]
 800463e:	2300      	movs	r3, #0
 8004640:	6123      	str	r3, [r4, #16]
 8004642:	4616      	mov	r6, r2
 8004644:	e7bc      	b.n	80045c0 <_printf_i+0x148>
 8004646:	6833      	ldr	r3, [r6, #0]
 8004648:	1d1a      	adds	r2, r3, #4
 800464a:	6032      	str	r2, [r6, #0]
 800464c:	681e      	ldr	r6, [r3, #0]
 800464e:	6862      	ldr	r2, [r4, #4]
 8004650:	2100      	movs	r1, #0
 8004652:	4630      	mov	r0, r6
 8004654:	f7fb fdcc 	bl	80001f0 <memchr>
 8004658:	b108      	cbz	r0, 800465e <_printf_i+0x1e6>
 800465a:	1b80      	subs	r0, r0, r6
 800465c:	6060      	str	r0, [r4, #4]
 800465e:	6863      	ldr	r3, [r4, #4]
 8004660:	6123      	str	r3, [r4, #16]
 8004662:	2300      	movs	r3, #0
 8004664:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004668:	e7aa      	b.n	80045c0 <_printf_i+0x148>
 800466a:	6923      	ldr	r3, [r4, #16]
 800466c:	4632      	mov	r2, r6
 800466e:	4649      	mov	r1, r9
 8004670:	4640      	mov	r0, r8
 8004672:	47d0      	blx	sl
 8004674:	3001      	adds	r0, #1
 8004676:	d0ad      	beq.n	80045d4 <_printf_i+0x15c>
 8004678:	6823      	ldr	r3, [r4, #0]
 800467a:	079b      	lsls	r3, r3, #30
 800467c:	d413      	bmi.n	80046a6 <_printf_i+0x22e>
 800467e:	68e0      	ldr	r0, [r4, #12]
 8004680:	9b03      	ldr	r3, [sp, #12]
 8004682:	4298      	cmp	r0, r3
 8004684:	bfb8      	it	lt
 8004686:	4618      	movlt	r0, r3
 8004688:	e7a6      	b.n	80045d8 <_printf_i+0x160>
 800468a:	2301      	movs	r3, #1
 800468c:	4632      	mov	r2, r6
 800468e:	4649      	mov	r1, r9
 8004690:	4640      	mov	r0, r8
 8004692:	47d0      	blx	sl
 8004694:	3001      	adds	r0, #1
 8004696:	d09d      	beq.n	80045d4 <_printf_i+0x15c>
 8004698:	3501      	adds	r5, #1
 800469a:	68e3      	ldr	r3, [r4, #12]
 800469c:	9903      	ldr	r1, [sp, #12]
 800469e:	1a5b      	subs	r3, r3, r1
 80046a0:	42ab      	cmp	r3, r5
 80046a2:	dcf2      	bgt.n	800468a <_printf_i+0x212>
 80046a4:	e7eb      	b.n	800467e <_printf_i+0x206>
 80046a6:	2500      	movs	r5, #0
 80046a8:	f104 0619 	add.w	r6, r4, #25
 80046ac:	e7f5      	b.n	800469a <_printf_i+0x222>
 80046ae:	bf00      	nop
 80046b0:	08004911 	.word	0x08004911
 80046b4:	08004922 	.word	0x08004922

080046b8 <memmove>:
 80046b8:	4288      	cmp	r0, r1
 80046ba:	b510      	push	{r4, lr}
 80046bc:	eb01 0402 	add.w	r4, r1, r2
 80046c0:	d902      	bls.n	80046c8 <memmove+0x10>
 80046c2:	4284      	cmp	r4, r0
 80046c4:	4623      	mov	r3, r4
 80046c6:	d807      	bhi.n	80046d8 <memmove+0x20>
 80046c8:	1e43      	subs	r3, r0, #1
 80046ca:	42a1      	cmp	r1, r4
 80046cc:	d008      	beq.n	80046e0 <memmove+0x28>
 80046ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046d6:	e7f8      	b.n	80046ca <memmove+0x12>
 80046d8:	4402      	add	r2, r0
 80046da:	4601      	mov	r1, r0
 80046dc:	428a      	cmp	r2, r1
 80046de:	d100      	bne.n	80046e2 <memmove+0x2a>
 80046e0:	bd10      	pop	{r4, pc}
 80046e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046ea:	e7f7      	b.n	80046dc <memmove+0x24>

080046ec <_sbrk_r>:
 80046ec:	b538      	push	{r3, r4, r5, lr}
 80046ee:	4d06      	ldr	r5, [pc, #24]	@ (8004708 <_sbrk_r+0x1c>)
 80046f0:	2300      	movs	r3, #0
 80046f2:	4604      	mov	r4, r0
 80046f4:	4608      	mov	r0, r1
 80046f6:	602b      	str	r3, [r5, #0]
 80046f8:	f7fc fdd4 	bl	80012a4 <_sbrk>
 80046fc:	1c43      	adds	r3, r0, #1
 80046fe:	d102      	bne.n	8004706 <_sbrk_r+0x1a>
 8004700:	682b      	ldr	r3, [r5, #0]
 8004702:	b103      	cbz	r3, 8004706 <_sbrk_r+0x1a>
 8004704:	6023      	str	r3, [r4, #0]
 8004706:	bd38      	pop	{r3, r4, r5, pc}
 8004708:	200002ec 	.word	0x200002ec

0800470c <memcpy>:
 800470c:	440a      	add	r2, r1
 800470e:	4291      	cmp	r1, r2
 8004710:	f100 33ff 	add.w	r3, r0, #4294967295
 8004714:	d100      	bne.n	8004718 <memcpy+0xc>
 8004716:	4770      	bx	lr
 8004718:	b510      	push	{r4, lr}
 800471a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800471e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004722:	4291      	cmp	r1, r2
 8004724:	d1f9      	bne.n	800471a <memcpy+0xe>
 8004726:	bd10      	pop	{r4, pc}

08004728 <_realloc_r>:
 8004728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800472c:	4680      	mov	r8, r0
 800472e:	4615      	mov	r5, r2
 8004730:	460c      	mov	r4, r1
 8004732:	b921      	cbnz	r1, 800473e <_realloc_r+0x16>
 8004734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004738:	4611      	mov	r1, r2
 800473a:	f7ff bc4b 	b.w	8003fd4 <_malloc_r>
 800473e:	b92a      	cbnz	r2, 800474c <_realloc_r+0x24>
 8004740:	f7ff fbdc 	bl	8003efc <_free_r>
 8004744:	2400      	movs	r4, #0
 8004746:	4620      	mov	r0, r4
 8004748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800474c:	f000 f81a 	bl	8004784 <_malloc_usable_size_r>
 8004750:	4285      	cmp	r5, r0
 8004752:	4606      	mov	r6, r0
 8004754:	d802      	bhi.n	800475c <_realloc_r+0x34>
 8004756:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800475a:	d8f4      	bhi.n	8004746 <_realloc_r+0x1e>
 800475c:	4629      	mov	r1, r5
 800475e:	4640      	mov	r0, r8
 8004760:	f7ff fc38 	bl	8003fd4 <_malloc_r>
 8004764:	4607      	mov	r7, r0
 8004766:	2800      	cmp	r0, #0
 8004768:	d0ec      	beq.n	8004744 <_realloc_r+0x1c>
 800476a:	42b5      	cmp	r5, r6
 800476c:	462a      	mov	r2, r5
 800476e:	4621      	mov	r1, r4
 8004770:	bf28      	it	cs
 8004772:	4632      	movcs	r2, r6
 8004774:	f7ff ffca 	bl	800470c <memcpy>
 8004778:	4621      	mov	r1, r4
 800477a:	4640      	mov	r0, r8
 800477c:	f7ff fbbe 	bl	8003efc <_free_r>
 8004780:	463c      	mov	r4, r7
 8004782:	e7e0      	b.n	8004746 <_realloc_r+0x1e>

08004784 <_malloc_usable_size_r>:
 8004784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004788:	1f18      	subs	r0, r3, #4
 800478a:	2b00      	cmp	r3, #0
 800478c:	bfbc      	itt	lt
 800478e:	580b      	ldrlt	r3, [r1, r0]
 8004790:	18c0      	addlt	r0, r0, r3
 8004792:	4770      	bx	lr

08004794 <_init>:
 8004794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004796:	bf00      	nop
 8004798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479a:	bc08      	pop	{r3}
 800479c:	469e      	mov	lr, r3
 800479e:	4770      	bx	lr

080047a0 <_fini>:
 80047a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a2:	bf00      	nop
 80047a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a6:	bc08      	pop	{r3}
 80047a8:	469e      	mov	lr, r3
 80047aa:	4770      	bx	lr
